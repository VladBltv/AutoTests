import allurefrom befree.api_model.orders.private import OrdersPrivatefrom befree.api_model.orders.db_queries.queries import QueriesOrdersfrom befree.api_model.orders.private.pricerules import shemasfrom allure_commons.types import Severityfrom datetime import datetime, timedeltafrom pytest_voluptuous import Sclass TestPricerulesShow(OrdersPrivate, QueriesOrders):    @allure.id("2397")    @allure.title("Получение списка типов прайсрулов")    @allure.label("service", "Orders")    @allure.feature("Прайсрулы")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("CMS")    @allure.description("Проверяем получение типов прайсрулов")    def test_list_types_pricerules(self):        with allure.step("Запросить список типов прайсрулов в апи"):            types_pricerules = self.api_pricerules.get_types()            assert types_pricerules.status_code == 200        with allure.step("Проверить, что полученная структура соответствует схеме"):            assert S(shemas.types_pricerules) == types_pricerules.json()    @allure.id("2394")    @allure.title("Получение одного прайсрула")    @allure.label("Service", "Orders")    @allure.feature("Прайсрулы")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("CMS")    @allure.description("Проверяем получение прайсрула")    def test_view_pricerule(self):        with allure.step("Находим прайсрул с типом промокод"):            conditions = ["and type_id = 1"]            pricerule_id = self.get_pricerule(conditions=conditions)        with allure.step("Запрашиваем прайсрул через апи"):            pricerule_response = self.api_pricerules.get(pricerule_id=pricerule_id)            assert pricerule_response.status_code == 200        with allure.step("Проверить, что полученная структура соответствует схеме"):            assert S(shemas.promocode) == pricerule_response.json()        with allure.step("Находим прайсрул на способы оплаты"):            conditions = ["and type_id = 2"]            pricerule_id = self.get_pricerule(conditions=conditions)        with allure.step("Запрашиваем прайсрул через апи"):            pricerule_response = self.api_pricerules.get(pricerule_id=pricerule_id)            assert pricerule_response.status_code == 200        with allure.step("Проверить, что полученная структура соответствует схеме"):            assert S(shemas.payment_method) == pricerule_response.json()    @allure.id("2395")    @allure.title("Получение списка прайсрулов")    @allure.label("service", "Orders")    @allure.feature("Прайсрулы")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("CMS")    @allure.description("Проверяем получение прайсрулов")    def test_list_pricerules(self):        with allure.step("Запросить список прайсрулов в апи"):            pricerules_response = self.api_pricerules.get_list()            assert pricerules_response.status_code == 200        with allure.step("Проверить, что полученная структура соответствует схеме"):            assert S(shemas.list_pricerules) == pricerules_response.json()        with allure.step("Поиск по типу прайсрула"):            with allure.step("Прайсрул с типом промокод"):                pricerules_response = self.api_pricerules.get_list(types_ids=[1])                assert pricerules_response.status_code == 200                conditions = ["and type_id = 1"]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules            with allure.step("Прайсрул с типом способ оплаты"):                pricerules_response = self.api_pricerules.get_list(types_ids=[2])                assert pricerules_response.status_code == 200                conditions = ["and type_id = 2"]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules        with allure.step("Поиск по статусу прайсрула"):            with allure.step("Прайсрул со статусом pending"):                pricerules_response = self.api_pricerules.get_list(status=["pending"])                assert pricerules_response.status_code == 200                now_datetime = datetime.today().strftime("%Y-%m-%d %H:%M:%S")                conditions = [f"and pr.start_at > '{now_datetime}'"]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules            with allure.step("Прайсрул со статусом running"):                pricerules_response = self.api_pricerules.get_list(status=["running"])                assert pricerules_response.status_code == 200                now_datetime = datetime.today().strftime("%Y-%m-%d %H:%M:%S")                conditions = [                    f"and (start_at <= '{now_datetime}' or start_at is null) " f"and ('{now_datetime}' <= end_at  or end_at is null)"]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules            with allure.step("Прайсрул со статусом ended"):                pricerules_response = self.api_pricerules.get_list(status=["ended"])                assert pricerules_response.status_code == 200                now_datetime = datetime.today().strftime("%Y-%m-%d %H:%M:%S")                conditions = [f"and '{now_datetime}' > end_at"]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules            with allure.step("Прайсрул по несуществующему статусу"):                pricerules_response = self.api_pricerules.get_list(status=["qwerty"])                assert pricerules_response.status_code == 422        with allure.step("Поиск по дате"):            with allure.step("Поиск по дате начала"):                date = datetime.today().strftime("%Y-%m-%d")                pricerules_response = self.api_pricerules.get_list(date_start=date)                assert pricerules_response.status_code == 200                conditions = [f"and (date(end_at) is null or date(end_at)  >= '{date}')"]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules            with allure.step("Поиск по дате окончания"):                date = datetime.today().strftime("%Y-%m-%d")                pricerules_response = self.api_pricerules.get_list(date_end=date)                assert pricerules_response.status_code == 200                conditions = [f"and (date(start_at) is null or date(start_at) <= '{date}')"]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules            with allure.step("Поиск по дате начала и окончания"):                date_start = (datetime.today() - timedelta(5)).strftime("%Y-%m-%d")                date_end = (datetime.today() + timedelta(5)).strftime("%Y-%m-%d")                pricerules_response = self.api_pricerules.get_list(date_start=date_start, date_end=date_end)                assert pricerules_response.status_code == 200                conditions = [                    f"and (date(end_at) is null or date(end_at)  >= '{date_start}')",                    f"and (date(start_at) is null or date(" f"start_at) <= '{date_end}')",                ]                count_db_pricerules = self.count_pricerules(conditions=conditions)                assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules        with allure.step("Поиск id или наименованию"):            query = "20"            pricerules_response = self.api_pricerules.get_list(query=query)            assert pricerules_response.status_code == 200            conditions = [f"and (title like '%{query}%' or CAST(id as TEXT) LIKE '%{query}%')"]            count_db_pricerules = self.count_pricerules(conditions=conditions)            assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules        with allure.step("Запрос с несколькими параметрами фильтрации"):            query = "2"            types_ids = 1            pricerules_response = self.api_pricerules.get_list(                query=query,                types_ids=[types_ids],                status=["running"],            )            assert pricerules_response.status_code == 200            now_datetime = datetime.today().strftime("%Y-%m-%d %H:%M:%S")            conditions = [                f"and (title like '%{query}%' or CAST(id as TEXT) LIKE '%{query}%') "                f"and pr.type_id ={types_ids} "                f"and (start_at <= '{now_datetime}' or start_at is null) "                f"and ('{now_datetime}' <= end_at  or end_at is null)"            ]            count_db_pricerules = self.count_pricerules(conditions=conditions)            assert pricerules_response.json()["data"]["pagination"]["total"] == count_db_pricerules    @allure.id("2393")    @allure.title("Получение списка прайсрулов с сортировкой по id")    @allure.label("Service", "Orders")    @allure.feature("Прайсрулы")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("CMS")    @allure.description("Проверяем получение прайсрулов с сортировкой по id прайсрула")    def test_list_pricerules_sort_by_id(self):        with allure.step("Отправляем запрос на первые 300 прайсрулов отсортированные по id desc"):            pricerules_response = self.api_pricerules.get_list(page=1, per_page=300)            assert pricerules_response.status_code == 200        with allure.step("Проверяем, что список отсортирован по убыванию id"):            ids = [rule["id"] for rule in pricerules_response.json()["data"]["pricerules"]]            assert ids == sorted(ids, reverse=True)        with allure.step("Отправляем запрос на первые 300 прайсрулов отсортированные по id asc"):            pricerules_response = self.api_pricerules.get_list(page=1, per_page=300, sort="id", sort_order="asc")            assert pricerules_response.status_code == 200        with allure.step("Проверяем, что список отсортирован по возрастанию id"):            ids = [rule["id"] for rule in pricerules_response.json()["data"]["pricerules"]]            assert ids == sorted(ids)    @allure.id("2392")    @allure.title("Получение списка прайсрулов с сортировкой по дате начала")    @allure.label("Service", "Orders")    @allure.feature("Прайсрулы")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("CMS")    @allure.description("Проверяем получение прайсрулов с сортировкой по дате начала прайсрула")    def test_list_pricerules_sort_by_date_start(self):        with allure.step("Отправляем запрос на первые 300 прайсрулов отсортированные по date_start desc"):            pricerules_response = self.api_pricerules.get_list(page=1, per_page=300, sort="dateStart",                                                               sort_order="desc")            assert pricerules_response.status_code == 200            pricerules_id_api = [rule["id"] for rule in pricerules_response.json()["data"]["pricerules"]]        with allure.step("Получаем 300 прайсрулов отсортированные по date_start desc из БД"):            pricerules_from_db = self.get_pricerules_with_sort(column="start_at", sort="desc", limit="300")            pricerules_id_db = [item["id"] for item in pricerules_from_db]        with allure.step("Проверяем, что списки совпадают"):            assert pricerules_id_api == pricerules_id_db        with allure.step("Отправляем запрос на первые 300 прайсрулов отсортированные по date_start asc"):            pricerules_response = self.api_pricerules.get_list(page=1, per_page=300, sort="dateStart", sort_order="asc")            assert pricerules_response.status_code == 200            pricerules_id_api = [rule["id"] for rule in pricerules_response.json()["data"]["pricerules"]]        with allure.step("Получаем 300 прайсрулов отсортированные по date_start asc из БД"):            pricerules_from_db = self.get_pricerules_with_sort(column="start_at", sort="asc", limit="300")            pricerules_id_db = [item["id"] for item in pricerules_from_db]        with allure.step("Проверяем, что списки совпадают"):            assert pricerules_id_api == pricerules_id_db    @allure.id("2395")    @allure.title("Получение списка прайсрулов с сортировкой по дате окончания")    @allure.label("Service", "Orders")    @allure.feature("Прайсрулы")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("CMS")    @allure.description("Проверяем получение прайсрулов с сортировкой по дате окончания прайсрула")    def test_list_pricerules_sort_by_date_end(self):        with allure.step("Отправляем запрос на первые 300 прайсрулов отсортированные по date_end desc"):            pricerules_response = self.api_pricerules.get_list(page=1, per_page=300, sort="dateEnd", sort_order="desc")            assert pricerules_response.status_code == 200            pricerules_id_api = [rule["id"] for rule in pricerules_response.json()["data"]["pricerules"]]        with allure.step("Получаем 300 прайсрулов отсортированные по date_start desc из БД"):            pricerules_from_db = self.get_pricerules_with_sort(column="end_at", sort="desc", limit="300")            pricerules_id_db = [item["id"] for item in pricerules_from_db]        with allure.step("Проверяем, что списки совпадают"):            assert pricerules_id_api == pricerules_id_db        with allure.step("Отправляем запрос на первые 300 прайсрулов отсортированные по date_end asc"):            pricerules_response = self.api_pricerules.get_list(page=1, per_page=300, sort="dateEnd", sort_order="asc")            assert pricerules_response.status_code == 200            pricerules_id_api = [rule["id"] for rule in pricerules_response.json()["data"]["pricerules"]]        with allure.step("Получаем 300 прайсрулов отсортированные по date_start asc из БД"):            pricerules_from_db = self.get_pricerules_with_sort(column="end_at", sort="asc", limit="300")            pricerules_id_db = [item["id"] for item in pricerules_from_db]        with allure.step("Проверяем, что списки совпадают"):            assert pricerules_id_api == pricerules_id_db