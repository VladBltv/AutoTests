import allurefrom allure_commons.types import Severityfrom befree.api_model.esb import EsbPublicfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.config.private import ConfigPrivatefrom befree.api_model.catalog.internal import CatalogInternalfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.orders.db_queries.queries import QueriesOrdersfrom befree.api_model.catalog.private import CatalogPrivatefrom befree.api_model.orders import utilsclass TestTimer(OrdersPublic, QueriesCatalog, QueriesOrders, ConfigPrivate):    @allure.id("2692")    @allure.title("Таймер в корзине на стейте cart")    @allure.description(        "Проверяем, что при отправке запроса корзины со стейтом чекаут устанавливается значение checkout_at, "        "и не выводится нотфиикация при запросах со стейтом cart, если прошло время установленного таймера"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("service", "Orders")    @allure.label("feature", "Оформление доставки")    def test_timer_state_cart(self):        with allure.step("Устанавливаем в конфигах значение таймера 15 минут"):            configs_response = self.api_private_config.update_single(                title="Максимальное время на оформление заказа",                key="maxOrderCheckoutTime",                value=15,            )            assert configs_response.status_code == 204        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)        with allure.step("Создаем корзину под неавторизованным пользователем"):            items = [{"id": variation, "qty": 1}]            cart = self.api_cart.create(items=items)            assert cart.json()["data"]["cartUuid"]            cart_uuid = cart.json()["data"]["cartUuid"]        with allure.step("Отправляем запрос со стейтом чекаут"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="checkout")            assert cart.json()["data"]["cartUuid"]        with allure.step("Проверяем, что заполнилось поле checkout_at в таблице cart"):            cart_db = self.get_cart_data(uuid=cart_uuid)            assert cart_db[0]["checkout_at"] != None        with allure.step("Отправляем запрос со стейтом чекаут до истечения времени таймера"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="checkout")        with allure.step("Проверяем, что запрос отработал без блокирующей нотфиикации"):            assert cart.json()["data"]["cartUuid"]        with allure.step("Меняем значение поле checkout_at, чтобы разница была более 15 минут"):            new_checkout_at = utils.time_subtraction(date_str=cart_db[0]["checkout_at"])            self.update_checkout_at(cart_uuid=cart_uuid, date_time=new_checkout_at)        with allure.step("Отправляем запрос со стейтом чекаут после истечения времени таймера"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="cart")        with allure.step("Проверяем, что в ответе приходит блокирующая нотификация"):            assert cart.json()["data"]["cartUuid"]    @allure.id("2693")    @allure.title("Таймер в корзине на стейте чекаут")    @allure.description(        "Проверяем, что при отправке запроса корзины со стейтом чекаут устанавливается значение checkout_at, "        "и выводится нотфиикация при повторном запросе со стейтом чекаут, если прошло время установленного таймера"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("service", "Orders")    @allure.label("feature", "Оформление доставки")    def test_timer_state_checkout(self):        with allure.step("Устанавливаем в конфигах значение таймера 15 минут"):            configs_response = self.api_private_config.update_single(                title="Максимальное время на оформление заказа",                key="maxOrderCheckoutTime",                value=15,            )            assert configs_response.status_code == 204        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)        with allure.step("Создаем корзину под неавторизованным пользователем"):            items = [{"id": variation, "qty": 1}]            cart = self.api_cart.create(items=items)            assert cart.json()["data"]["cartUuid"]            cart_uuid = cart.json()["data"]["cartUuid"]        with allure.step("Отправляем запрос со стейтом чекаут"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="checkout")            assert cart.json()["data"]["cartUuid"]        with allure.step("Проверяем, что заполнилось поле checkout_at в таблице cart"):            cart_db = self.get_cart_data(uuid=cart_uuid)            assert cart_db[0]["checkout_at"] != None        with allure.step("Отправляем запрос со стейтом чекаут до истечения времени таймера"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="checkout")        with allure.step("Проверяем, что запрос отработал без блокирующей нотфиикации"):            assert cart.json()["data"]["cartUuid"]        with allure.step("Меняем значение поле checkout_at, чтобы разница была более 15 минут"):            new_checkout_at = utils.time_subtraction(date_str=cart_db[0]["checkout_at"])            self.update_checkout_at(cart_uuid=cart_uuid, date_time=new_checkout_at)        with allure.step("Отправляем запрос со стейтом чекаут после истечения времени таймера"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="checkout")        with allure.step("Проверяем, что в ответе приходит блокирующая нотификация"):            assert cart.json()["data"]["notifications"][0]["level"] == "error"    @allure.id("2694")    @allure.title("Таймер в корзине на стейте саммари")    @allure.description(        "Проверяем, что при отправке запроса корзины со стейтом чекаут устанавливается значение checkout_at, "        "и выводится нотфиикация при запросе со стейтом саммари, если прошло время установленного таймера"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("service", "Orders")    @allure.label("feature", "Оформление доставки")    def test_timer_state_summary(self):        with allure.step("Устанавливаем в конфигах значение таймера 15 минут"):            configs_response = self.api_private_config.update_single(                title="Максимальное время на оформление заказа",                key="maxOrderCheckoutTime",                value=15,            )            assert configs_response.status_code == 204        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)        with allure.step("Создаем корзину под неавторизованным пользователем"):            items = [{"id": variation, "qty": 1}]            cart = self.api_cart.create(items=items)            assert cart.json()["data"]["cartUuid"]            cart_uuid = cart.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(                cart_uuid=cart_uuid, pickpoint_id=pickuppoints.json()["data"][0]["id"]            )            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Проверяем, что заполнилось поле checkout_at в таблице cart"):            cart_db = self.get_cart_data(uuid=cart_uuid)            assert cart_db[0]["checkout_at"] != None        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Отправляем запрос со стейтом саммари до истечения времени таймера"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="summary")        with allure.step("Проверяем, что запрос отработал без блокирующей нотфиикации"):            assert cart.json()["data"]["cartUuid"]        with allure.step("Меняем значение поле checkout_at, чтобы разница была более 15 минут"):            new_checkout_at = utils.time_subtraction(date_str=cart_db[0]["checkout_at"])            self.update_checkout_at(cart_uuid=cart_uuid, date_time=new_checkout_at)        with allure.step("Отправляем запрос со стейтом чекаут после истечения времени таймера"):            cart = self.api_cart.update_state(cart_uuid=cart_uuid, state="checkout")        with allure.step("Проверяем, что в ответе приходит блокирующая нотификация"):            assert cart.json()["data"]["notifications"][0]["level"] == "error"    @allure.id("2695")    @allure.title("Таймер в корзине при оформлении заказа")    @allure.description(        "Проверяем, что при отправке запроса корзины со стейтом чекаут устанавливается значение checkout_at, "        "и выводится нотфиикация при запросе order/send, если прошло время установленного таймера"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("service", "Orders")    @allure.label("feature", "Оформление доставки")    def test_timer_order_send(self):        with allure.step("Устанавливаем в конфигах значение таймера 15 минут"):            configs_response = self.api_private_config.update_single(                title="Максимальное время на оформление заказа",                key="maxOrderCheckoutTime",                value=15,            )            assert configs_response.status_code == 204        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)        with allure.step("Создаем корзину под неавторизованным пользователем"):            items = [{"id": variation, "qty": 1}]            cart = self.api_cart.create(items=items)            assert cart.json()["data"]["cartUuid"]            cart_uuid = cart.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(                cart_uuid=cart_uuid, pickpoint_id=pickuppoints.json()["data"][0]["id"]            )            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Проверяем, что заполнилось поле checkout_at в таблице cart"):            cart_db = self.get_cart_data(uuid=cart_uuid)            assert cart_db[0]["checkout_at"] != None        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Меняем значение поле checkout_at, чтобы разница была более 15 минут"):            new_checkout_at = utils.time_subtraction(date_str=cart_db[0]["checkout_at"])            self.update_checkout_at(cart_uuid=cart_uuid, date_time=new_checkout_at)        with allure.step("Оформляем заказ"):            order = self.api_order.send_order(                cart_uuid=cart_with_payment.json()["data"]["cartUuid"]            )            assert order.status_code == 200        with allure.step("Проверяем, что в ответе приходит блокирующая нотификация"):            assert order.json()["data"]["notifications"][0]["level"] == "error"