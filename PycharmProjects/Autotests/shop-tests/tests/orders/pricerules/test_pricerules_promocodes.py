import allurefrom allure_commons.types import Severityfrom mimesis import Text, Person, Genericfrom befree.api_model.customer import Customerfrom befree.api_model.orders import utilsfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.private import CatalogPrivatefrom befree.api_model.orders.private import OrdersPrivateclass TestPricerules(OrdersPublic, QueriesCatalog, CatalogPrivate, OrdersPrivate):    @allure.id("2354")    @allure.title("Несуществующий промокод не применяется")    @allure.description("Проверяем, что промокод не применяется в корзине и выводится нотификация")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_nonexistent_promocode(self):        with allure.step("Находим товар, который есть в наличии и создаем корзину"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине несуществующий промокод"):            promocode = "ляляля"            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"    @allure.id("2356")    @allure.title("Удаление промокода в корзине")    @allure.description("Проверяем, что промокод удаляется из заказа")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_delete_promocode(self):        with allure.step("Создаем промокод"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии и создаем корзину"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Очищаем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=None)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод очистился и нотификация не появляется"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2358")    @allure.title("Сбрасывается применение промокода")    @allure.description(        "Проверяем, что промокод сбрасывается в корзине, если изменились условия, неподходящие под условия промокода, "        "но промокод все равно остается в корзине"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_reset_and_restore_promocode(self):        with allure.step("Находим товар, который есть в наличии и создаем корзину"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 3}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Создаем промокод на сумму корзины"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            value = cart_response.json()["data"]["order"]["resultTotal"]            conditions = [{"type": "cartSum", "operand": ">=", "condition": value}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Уменьшаем количество товара в корзине"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.update_qty(cart_uuid=cart_uuid, current_tab="delivery", items=items)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применяется, но в корзине остался"):            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == False        with allure.step("Возвращаем количество товара в корзине, подходящее под условие промокода"):            items = [{"id": variation, "qty": 3}]            cart_response = self.api_cart.update_qty(cart_uuid=cart_uuid, current_tab="delivery", items=items)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применяется"):            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2359")    @allure.title("Повторное применение одноразового промокода")    @allure.description("Проверяем, что одноразовый промокод можно применить только один раз")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_one_off_promocode(self):        with allure.step("Создаем одноразовый промокод"):            promocode = Text("en").word()            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)        with allure.step("Создаем корзину"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            pickuppoint_id = pickuppoints.json()["data"][0]["id"]        with allure.step("Обновляем корзину с доставкой в ПВЗ"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid, pickpoint_id=pickuppoint_id)            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Оформляем заказ"):            order = self.api_order.send_order(cart_uuid=cart_with_payment.json()["data"]["cartUuid"])            assert order.status_code == 200        with allure.step("Создаем еще одну корзину"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"    @allure.id("2353")    @allure.title("Применение многоразового промокода с ограничениями под одним пользователем")    @allure.description(        "Проверяем, что многоразовый промокод с ограничением можно применить несколько раз под одним " "пользователем")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_reusable_promocode_with_restrictions_one_user(self):        with allure.step("Создаем многоразовый промокод с ограничением = 2"):            promocode = Text("en").word()            promocodes = {"counterType": "general", "counterAmount": 2, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Формируем данные кастомера"):            person = Person("en")            email = person.email()            password = "aA123456"        with allure.step("Регистрируем   кастомера и получаем токен"):            customer_init = Customer(email=email, password=password)            register_customer = customer_init.register()            assert register_customer.status_code == 200            customer_token = register_customer.json()["token"]        with allure.step("Создаем заказ"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            utils.create_default_order(items=items, token=customer_token, promocode=promocode)        with allure.step("Создаем еще одну корзину под этим же пользователем"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items, token=customer_token)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2355")    @allure.title("Применение многоразового промокода с ограничениями под несколькими пользователями")    @allure.description(        "Проверяем, что многоразовый промокод с ограничением можно применить несколько раз под одним " "пользователем")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_reusable_promocode_with_restrictions_users(self):        with allure.step("Создаем многоразовый промокод с ограничением = 2"):            promocode = Text("en").word()            promocodes = {"counterType": "general", "counterAmount": 2, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Оформляем заказ c промокодом"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            utils.create_default_order(items=items, promocode=promocode)        with allure.step("Оформляем заказ c этим же промокодом под другим пользователем"):            utils.create_default_order(items=items, promocode=promocode)        with allure.step("Создаем еще одну корзину под другим пользователем"):            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"    @allure.id("2357")    @allure.title("Применение промокода с счетчиком на пользователя")    @allure.description(        "Проверяем, что промокод с счетчиком на пользователя можно применить несколько раз под " "несколькими пользователями")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_counter_customer(self):        with allure.step("Создаем промокод с счетчиком на пользователя = 1"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "perUser", "counterAmount": 1, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Формируем данные кастомера"):            person = Person("en")            email = person.email()            password = "aA123456"        with allure.step("Регистрируем   кастомера и получаем токен"):            customer_init = Customer(email=email, password=password)            register_customer = customer_init.register()            assert register_customer.status_code == 200            customer_token = register_customer.json()["token"]        with allure.step("Оформляем заказ с промокодом под пользователем"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            utils.create_default_order(items=items, token=customer_token, promocode=promocode)        with allure.step("Создаем еще одну корзину под этим же пользователем"):            cart_response = self.api_cart.create(items=items, token=customer_token)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Регистрируем нового кастомера и получаем токен"):            person = Person("en")            email = person.email()            password = "aA123456"            customer_init = Customer(email=email, password=password)            register_customer = customer_init.register()            assert register_customer.status_code == 200            customer_token = register_customer.json()["token"]        with allure.step("Оформляем заказ с этим же промокодом под новым пользователем"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            utils.create_default_order(items=items, token=customer_token, promocode=promocode)        with allure.step("Создаем еще одну корзину под этим новым пользователем"):            cart_response = self.api_cart.create(items=items, token=customer_token)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"    @allure.id("2360")    @allure.title("Применение многоразового промокода без ограничений")    @allure.description(        "Проверяем, что многоразовый промокод без ограничений можно применить сколько угодно  раз под " "одним пользователем")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_reusable_promocode_without_restrictions(self):        with allure.step("Создаем многоразовый промокод без ограничений"):            promocode = Text("en").word()            promocodes = {"counterType": "general", "counterAmount": None, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Формируем данные кастомера"):            person = Person("en")            email = person.email()            password = "aA123456"        with allure.step("Регистрируем   кастомера и получаем токен"):            customer_init = Customer(email=email, password=password)            register_customer = customer_init.register()            assert register_customer.status_code == 200            customer_token = register_customer.json()["token"]        with allure.step("Оформляем заказ с промокодом под пользователем"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            utils.create_default_order(items=items, token=customer_token, promocode=promocode)        with allure.step("Создаем еще одну корзину под этим же пользователем"):            cart_response = self.api_cart.create(items=items, token=customer_token)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None        with allure.step("Регистрируем нового кастомера и получаем токен"):            person = Person("en")            email = person.email()            password = "aA123456"            customer_init = Customer(email=email, password=password)            register_customer = customer_init.register()            assert register_customer.status_code == 200            customer_token = register_customer.json()["token"]        with allure.step("Оформляем заказ с этим же промокодом под новым пользователем"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]            utils.create_default_order(items=items, token=customer_token, promocode=promocode)        with allure.step("Создаем еще одну корзину под этим новым пользователем"):            cart_response = self.api_cart.create(items=items, token=customer_token)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2433")    @allure.title("Регистронезависимость промокода")    @allure.description("Проверяем, что применение промокода не зависит от регистра написанных букв")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_case_insensitive_promocode(self):        with allure.step("Создаем промокод, состоящий из строчных букв"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": None, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)        with allure.step("Создаем корзину"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод с заглавной буквой"):            change_promocode = promocode.title()            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=change_promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Сбрасываем промокод в корзине"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=None, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод со всеми заглавными буквами"):            change_promocode = promocode.upper()            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=change_promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.title("Применение промокода с счетчиком на пользователя для неавторизованного пользователя")    @allure.description("Проверяем, что применение промокода не зависит от того авотризован пользователь или нет")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_counter_customer_unauthorized(self):        with allure.step("Создаем промокод с счетчиком на пользователя"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "perUser", "counterAmount": 1, "values": [promocode]}            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)        with allure.step("Создаем корзину"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            change_promocode = promocode.title()            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=change_promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True