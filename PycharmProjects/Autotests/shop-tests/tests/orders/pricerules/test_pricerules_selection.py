import allureimport timefrom allure_commons.types import Severityfrom mimesis import Text, Genericfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.private import CatalogPrivatefrom befree.api_model.orders.private import OrdersPrivatefrom befree.api_model.catalog import utilsclass TestPricerulesSelection(OrdersPublic, QueriesCatalog, CatalogPrivate, OrdersPrivate):    @allure.id("2427")    @allure.title("Промокод с ограничением на список товаров")    @allure.description("Проверяем, что промокод применяется только на товары из списка")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_product_list(self):        with allure.step("Находим два товара без скидки, которые есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation1 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            variation2 = self.find_omniAndSf_stocks(qty=10, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation1, "qty": 1}, {"id": variation2, "qty": 1}]        with allure.step("Создаем корзину с двумя товарами"):            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Создаем промокод, действующий на один из товаров"):            product1 = self.get_product_by_variation(variation_id=variation1)            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "articles", "operand": "in", "condition": [f"{product1["article"]}"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Проверяем, что скидка действует только на один товар"):            items = cart_response.json()["data"]["order"]["items"]            if items[0]["id"] == variation1:                assert items[0]["calculatedPrice"] != items[0]["maximumPrice"]                assert items[1]["calculatedPrice"] == items[1]["maximumPrice"]            else:                assert items[0]["calculatedPrice"] == items[0]["maximumPrice"]                assert items[1]["calculatedPrice"] != items[1]["maximumPrice"]    @allure.id("2408")    @allure.title("Промокод с отбором по стикеру new")    @allure.description("Проверяем, что промокод применяется только на товары, у которых есть стикер нью")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_new(self):        with allure.step("Создаем промокод, действующий на товары со стикером new"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "in", "condition": ["new"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар со стикером new, которые есть в наличии"):            conditions = ["and p.sticker_new = true"]            variation_new = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_new, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Находим товар без стикера new, которые есть в наличии"):            conditions = ["and p.sticker_new = false"]            variation_not_new = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_not_new, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товарами, где у одного товара есть стикер new, а у другого нет"):            items = [{"id": variation_new, "qty": 1},{"id": variation_not_new, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2431")    @allure.title("Промокод с отбором без стикера new")    @allure.description("Проверяем, что промокод применяется только на товары, у которых нет стикера нью")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_not_new(self):        with allure.step("Создаем промокод, действующий на товары без стикера new"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "notIn", "condition": ["new"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без стикера new, которые есть в наличии"):            conditions = ["and p.sticker_new = false"]            variation_not_new = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_not_new, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Находим товар со стикером new, которые есть в наличии"):            conditions = ["and p.sticker_new = true"]            variation_new = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_new, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товарами, где у одного товара есть стикер new, а у другого нет"):            items = [{"id": variation_new, "qty": 1},{"id": variation_not_new, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2421")    @allure.title("Промокод с отбором по стикеру sale")    @allure.description("Проверяем, что промокод применяется только на товары, у которых есть атрибут sale")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_sale(self):        with allure.step("Создаем промокод, действующий на товары со стикером sale"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "in", "condition": ["sale"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар с атрибутом sale, который есть в наличии"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 1"]            variation_sale = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_sale, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Находим товар без атрибута sale, который есть в наличии"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 2"]            variation_not_sale = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_not_sale, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товарами, где у одного товара есть атрибут sale, а у другого нет"):            items = [{"id": variation_not_sale, "qty": 1},{"id": variation_sale, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2420")    @allure.title("Промокод с отбором не по стикеру sale")    @allure.description("Проверяем, что промокод применяется только на товары, у которых нет атрибута sale")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_not_sale(self):        with allure.step("Создаем промокод, действующий на товары без стикера sale"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "notIn", "condition": ["sale"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар с атрибутом sale, который есть в наличии"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 1"]            variation_sale = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_sale, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Находим товар без атрибута sale, который есть в наличии"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 2"]            variation_not_sale = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_not_sale, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товарами, где у одного товара есть атрибут sale , а у другого нет"):            items = [{"id": variation_not_sale, "qty": 1},{"id": variation_sale, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2406")    @allure.title("Промокод с отбором по категории")    @allure.description("Проверяем, что промокод применяется только на товары с определенной категорией")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_category(self):        with allure.step("Находим товар, который есть в наличии"):            variation_category = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            product = self.get_product_by_variation(variation_id=variation_category)            category_id = product["category_id"]        with allure.step("Создаем промокод, действующий на товар с его категорией"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "compilations", "operand": "in", "condition": [int(category_id)]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину"):            items = [{"id": variation_category, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Находим товар другой категории, который есть в наличии"):            conditions = [f"and p.category_id != {category_id}"]            variation_not_category = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_not_category, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товарами, где один товар принадлежит категории, а другой нет"):            items = [{"id": variation_category, "qty": 1},{"id": variation_not_category, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2414")    @allure.title("Промокод с отбором по подборке")    @allure.description("Проверяем, что промокод применяется только на товары из определенной подборки")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_compilation(self):        with allure.step("Находим товар, который есть в наличии"):            variation_compilation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            product = self.get_product_by_variation(variation_id=variation_compilation)        with allure.step("Создаем подборку, состоящую только из этого товара"):            compilation = utils.generate_compilation_by_articles(articles=[product["article"]])            compilation_id = compilation["data"]["id"]        with allure.step("Создаем промокод, действующий на товар этой подборки"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "compilations", "operand": "in", "condition": [int(compilation_id)]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201            time.sleep(2)        with allure.step("Создаем корзину"):            items = [{"id": variation_compilation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Находим другой товар, который есть в наличии"):            conditions = [f'and p.article != \'{product["article"]}\'']            variation_not_compilation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation_not_compilation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товарами, где один товар принадлежит подборке, а другой нет"):            items = [{"id": variation_compilation, "qty": 1},{"id": variation_not_compilation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2412")    @allure.title("Промокод, который не применяется к списку товаров")    @allure.description("Проверяем, что промокод применяется только на товары, которые не указаны в списке")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_dont_apply_to_list_articles(self):        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            product = self.get_product_by_variation(variation_id=variation)        with allure.step("Создаем промокод, который не будет действовать на найденный товар"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "articles", "operand": "notIn", "condition": [f"{product["article"]}"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Находим другой товар, которого нет в списке ограничений прайсрула"):            conditions = [f'and p.article != \'{product["article"]}\'']            variation1 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True    @allure.id("2401")    @allure.title("Промокод с отбором по удаленной подборке")    @allure.description("Проверяем, что промокод не применяется на товары, если подборка была удалена")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_deleted_compilation(self):        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            product = self.get_product_by_variation(variation_id=variation)        with allure.step("Создаем подборку, состоящую только из этого товара"):            compilation = utils.generate_compilation_by_articles(articles=[product["article"]])            compilation_id = compilation["data"]["id"]        with allure.step("Создаем промокод, действующий на товар этой подборки"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "compilations", "operand": "in", "condition": [int(compilation_id)]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Удаляем подборку"):            delete_response = self.api_compilations.delete(compilation_id=compilation_id)            assert delete_response.status_code == 200        with allure.step("Создаем корзину"):            items = [{"id": variation, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Находим другой товар, который есть в наличии"):            conditions = [f'and p.article != \'{product["article"]}\'']            variation1 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None