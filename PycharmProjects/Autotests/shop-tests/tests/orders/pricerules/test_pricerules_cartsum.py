import allurefrom allure_commons.types import Severityfrom mimesis import Text, Genericfrom befree.api_model.orders import utilsfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.private import CatalogPrivatefrom befree.api_model.orders.private import OrdersPrivateclass TestPricerulesCartSum(OrdersPublic, QueriesCatalog, CatalogPrivate, OrdersPrivate):    @allure.id("2370")    @allure.title("Применение промокода с ограничением на сумму корзины 'больше'")    @allure.description(        "Проверяем, что прайсрул применяется в корзине только если сумма всей корзины строго больше " "той, что указана в прайсруле")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_cartsum_greater(self):        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]            cart_sum = cart_response.json()["data"]["order"]["resultTotal"]        with allure.step("Создаем промокод с ограничением больше, чем сумма у заказа"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": ">", "condition": cart_sum}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Создаем промокод с ограничением больше, чем (сумма заказа - 1)"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": ">", "condition": cart_sum - 1}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2370")    @allure.title("Применение промокода с ограничением на сумму корзины 'больше или равно'")    @allure.description(        "Проверяем, что прайсрул применяется в корзине только если сумма всей корзины  больше или " "равна той, что указана в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_cartsum_greater_or_equal(self):        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]            cart_sum = cart_response.json()["data"]["order"]["resultTotal"]        with allure.step("Создаем промокод с ограничением больше или равно, чем (сумма заказа + 1)"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": ">=", "condition": cart_sum + 1}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Создаем промокод с ограничением больше или равно, чем общая сумма заказа"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": ">=", "condition": cart_sum}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2368")    @allure.title("Применение промокода с ограничением на сумму корзины 'меньше'")    @allure.description(        "Проверяем, что прайсрул применяется в корзине только если сумма всей корзины строго меньше " "той, что указана в прайсруле")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_cartsum_less(self):        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]            cart_sum = cart_response.json()["data"]["order"]["resultTotal"]        with allure.step("Создаем промокод с ограничением меньше, чем сумма у заказа"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": "<", "condition": cart_sum}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Создаем промокод с ограничением меньше, чем (сумма заказа + 1)"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": "<", "condition": cart_sum + 1}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2362")    @allure.title("Применение промокода с ограничением на сумму корзины 'меньше или равно'")    @allure.description(        "Проверяем, что прайсрул применяется в корзине только если сумма всей корзины  меньше или " "равна той, " "что указана в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_cartsum_less_or_equal(self):        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]            cart_sum = cart_response.json()["data"]["order"]["resultTotal"]        with allure.step("Создаем промокод с ограничением меньше или равно, чем (сумма заказа - 1)"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": "<=", "condition": cart_sum - 1}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Создаем промокод с ограничением меньше или равно, чем общая сумма заказа"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "cartSum", "operand": "<=", "condition": cart_sum}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2363")    @allure.title("Применение прайсрула на способ оплаты с ограничением на сумму корзины 'больше или равно'")    @allure.description(        "Проверяем, что прайсрул на способ оплаты применяется в корзине только если сумма всей корзины  больше или "        "равна той, что указана в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_cartsum(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  prc.condition::text like '%podeli%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)            condition = ["and  prc.condition::text like '%sbp%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]            cart_sum = cart_with_customer.json()["data"]["order"]["calculatedTotal"]        with allure.step("Создаем прайсрул на метод оплаты sbp и на сумму корзины больше или равной, "                         "чем сумма заказа + 100"):            type_id = 2            conditions = [                {"type": "cartSum", "operand": ">=", "condition": cart_sum + 100},                {"type": "paymentMethod", "operand": "in", "condition": ["sbp"]},            ]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма заказа не изменилась"):            assert cart_with_payment.json()["data"]["order"]["calculatedTotal"] == cart_sum        with allure.step("Софтделитим прайсрулы c методом оплаты sbp"):            condition = ["and  prc.condition::text like '%sbp%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на метод оплаты sbp и на сумму корзины больше или равной заказу"):            type_id = 2            conditions = [                {"type": "cartSum", "operand": ">=", "condition": cart_sum},                {"type": "paymentMethod", "operand": "in", "condition": ["sbp"]},            ]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма заказа не изменилась"):            assert cart_with_payment.json()["data"]["order"]["calculatedTotal"] == cart_sum        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма заказа изменилась"):            assert cart_with_payment.json()["data"]["order"]["calculatedTotal"] < cart_sum