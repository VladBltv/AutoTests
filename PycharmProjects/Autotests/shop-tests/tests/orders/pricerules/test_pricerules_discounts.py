import allurefrom allure_commons.types import Severityfrom mimesis import Text, Genericfrom befree.api_model.orders import utilsfrom utils import helpersfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.config.db_queries.queries import QueriesConfigfrom befree.api_model.orders.db_queries.queries import QueriesOrdersfrom befree.api_model.config.private import ConfigPrivatefrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.orders.private import OrdersPrivateclass TestPricerulesDiscounts(OrdersPublic, QueriesCatalog, OrdersPrivate, QueriesConfig, ConfigPrivate, QueriesOrders):    @allure.id("2364")    @allure.title("Применение промокода на бесплатную доставку")    @allure.description(        "Проверяем, что при применении промокода на бесплатную доставку сумма доставки везде " "выводится нулевая")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_free_shipping(self):        with allure.step("Создаем промокод на бесплатную доставку"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"deliveryPercent": 100}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Устанавливаем значение трешхолда больше суммы заказа, чтобы была платная доставка"):            key = "freeShippingSum"            config_bd = self.get_config_by_key(key=key)            freeShippingSum_value = cart_response.json()["data"]["order"]["resultTotal"]            configs_response = self.api_private_config.update_single(title=config_bd[0]["title"], key=key,                                                                     value=freeShippingSum_value + 1)            assert configs_response.status_code == 204        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что значение leftToTreshold обнулилось"):            assert cart_response.json()["data"]["order"]["leftToTreshold"] == 0        with allure.step("Отправляем запрос на получение методов доставок"):            delivery_methods_response = self.api_delivery.get_delivery_methods(cart_uuid=cart_uuid)            assert delivery_methods_response.status_code == 200        with allure.step("Проверяем, что сумма доставки равна 0"):            assert delivery_methods_response.json()["data"][0]["price"] == 0            if len(delivery_methods_response.json()["data"]) > 1:                assert delivery_methods_response.json()["data"][1]["price"] == 0        with allure.step("Отправляем запрос на получение пикпоинтов"):            pickpoints_response = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickpoints_response.status_code == 200        with allure.step("Проверяем, что по всем пикпоинтам сумма доставки равна 0"):            count_zero = helpers.count_value_key_in_list(iterable=pickpoints_response.json()["data"],                                                         key="deliveryPrice", value=0)            assert count_zero == len(pickpoints_response.json()["data"])        with allure.step("Отправляем запрос на получение интервалов"):            address = utils.get_address()            intervals_response = self.api_delivery.get_intervals(cart_uuid=cart_uuid, address=address["intervals"])            assert intervals_response.status_code == 200        with allure.step("Проверяем, что по всем интервалам сумма доставки равна 0"):            intervals = intervals_response.json()["data"]["services"]            assert intervals[0]["priceMin"] == 0            if len(intervals) > 1:                assert intervals[1]["priceMin"] == 0        with allure.step("Обновляем корзину с доставкой с полем платформы"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickpoints_response.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма доставки в заказе равна 0"):            assert cart_with_shipping.json()["data"]["order"]["shipping"]["deliveryPrice"] == 0    @allure.id("2410")    @allure.title("Применение промокода со скидкой в рублях на товар без скидки")    @allure.description(        "Проверяем, что при применении промокода со скидкой в рублях на товар без скидки, " "сумма скидки по заказу будет равна значению в промокоде"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_rub_product_without_discount(self):        with allure.step("Создаем промокод на 100р"):            value = 100            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"type": "sum", "amount": value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе соответствует сумме скидки в промокоде"):            item = cart_response.json()["data"]["order"]["items"][0]            assert item["discountAmount"] == value            assert item["maximumSum"] - item["calculatedSum"] == value            assert item["discountPercent"] == round(value / item["maximumSum"] * 100)    @allure.id("2407")    @allure.title("Применение промокода со скидкой в рублях на товар со скидкой")    @allure.description(        "Проверяем, что при применении промокода со скидкой в рублях на товар со скидкой, сумма скидки по заказу "        "будет равна значению скидка в промокоде + скидка в варианте"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_rub_product_with_discount(self):        with allure.step("Создаем промокод на 100р"):            value = 100            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"type": "sum", "amount": value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар со скидкой и свойством кроссаут, который есть в наличии"):            conditions = ["and v.maximum_price != v.current_price and v.crossout  = true and v.current_price > 200"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step(                "Проверяем, что сумма скидки в заказе соответствует скидка в промокоде + скидка в " "варианте"):            item = cart_response.json()["data"]["order"]["items"][0]            variation_db = self.get_variation(id=variation)            discount = value + (variation_db["maximum_price"] - variation_db["current_price"])            assert item["discountAmount"] == value + (variation_db["maximum_price"] - variation_db["current_price"])            assert item["maximumSum"] - item["calculatedSum"] == discount            assert item["discountPercent"] == round(discount / item["maximumSum"] * 100)        with allure.step("Находим товар со скидкой, без свойства кроссаут, который есть в наличии"):            conditions = ["and v.maximum_price != v.current_price and v.crossout  = false"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе соответствует скидке в промокоде"):            item = cart_response.json()["data"]["order"]["items"][0]            assert item["discountAmount"] == value            assert item["maximumSum"] - item["calculatedSum"] == value            assert item["discountPercent"] == round(value / item["maximumSum"] * 100)    @allure.id("2404")    @allure.title("Применение промокода со скидкой в процентах на товар без скидки")    @allure.description(        "Проверяем, что при применении промокода со скидкой в процентах на товар без скидки, сумма скидки по заказу "        "будет равна значению в промокоде"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_percent_product_without_discount(self):        with allure.step("Создаем промокод на 10%"):            value = 10            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"type": "percent", "amount": value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе соответствует сумме скидки в промокоде"):            item = cart_response.json()["data"]["order"]["items"][0]            assert item["discountPercent"] == value            assert item["discountAmount"] == round(item["maximumSum"] * value / 100)            assert item["calculatedSum"] == item["maximumSum"] - round(item["maximumSum"] * value / 100)    @allure.id("2419")    @allure.title("Применение промокода со скидкой в процентах на товар со скидкой")    @allure.description(        "Проверяем, что при применении промокода со скидкой в процентах на товар со скидкой, сумма скидки по заказу "        "будет равна значению в промокоде"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_percent_product_with_discount(self):        with allure.step("Создаем промокод на 10%"):            value = 10            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"type": "percent", "amount": value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар со скидкой и свойством кроссаут, который есть в наличии"):            conditions = ["and v.maximum_price != v.current_price and v.crossout  = true"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step(                "Проверяем, что сумма скидки в заказе соответствует скидка в промокоде + скидка в " "варианте"):            item = cart_response.json()["data"]["order"]["items"][0]            variation_db = self.get_variation(id=variation)            discount = round(value / 100 * variation_db["current_price"])            assert item["discountAmount"] == variation_db["maximum_price"] - variation_db["current_price"] + discount            assert item["discountPercent"] == round(item["discountAmount"] / variation_db["maximum_price"] * 100)            assert item["calculatedSum"] == item["maximumSum"] - item["discountAmount"]        with allure.step("Находим товар со скидкой и без свойства кроссаут, который есть в наличии"):            conditions = ["and v.maximum_price != v.current_price and v.crossout  = false"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе соответствует сумме скидки в промокоде"):            item = cart_response.json()["data"]["order"]["items"][0]            assert item["discountPercent"] == value            assert item["discountAmount"] == round(item["maximumSum"] * value / 100)            assert item["calculatedSum"] == item["maximumSum"] - round(item["maximumSum"] * value / 100)    @allure.id("2434")    @allure.title("Применение прайсрула на способ оплаты со скидкой в рублях на товар без скидки")    @allure.description(        "Проверяем, что при применении промокода со скидкой в рублях на товар без скидки, " "сумма скидки по заказу будет равна значению в промокоде"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_rub_product_without_discount(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  prc.condition::text like '%cash%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты cash со скидкой 100р"):            value = 100            discounts = {"type": "sum", "amount": value, "deliveryPercent": 0}            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["cash"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id,                                                                   discounts=discounts)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе соответствует сумме скидки в прайсруле"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["discountAmount"] == value            assert item["maximumSum"] - item["calculatedSum"] == value            assert item["discountPercent"] == round(value / item["maximumSum"] * 100)    @allure.id("2418")    @allure.title("Применение прайсрула на способ оплаты со скидкой в процентах на товар без скидки")    @allure.description(        "Проверяем, что при применении прайсрула на способ оплаты со скидкой в процентах на товар без скидки, "        "сумма скидки по заказу будет равна значению в промокоде"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_percent_product_without_discount(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  prc.condition::text like '%sbp%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты sbp со скидкой 10%"):            value = 10            discounts = {"type": "percent", "amount": value, "deliveryPercent": 0}            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["sbp"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id,                                                                   discounts=discounts)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что процент скидки в заказе соответствует проценту скидки в прайсруле"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["discountPercent"] == value            assert item["discountAmount"] == round(item["maximumSum"] * value / 100)            assert item["calculatedSum"] == item["maximumSum"] - round(item["maximumSum"] * value / 100)    @allure.id("2405")    @allure.title("Иерархичное применение разных типов прайсрулов к товару без скидки")    @allure.description(        "Проверяем, что при применении одновременно промокода и прайсрула на способы оплаты расчет скидки ведется по "        "приоритетам: сначала промокод, а затем прайсрул"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_priority_pricerules_payment_method_product_without_discount(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  prc.condition::text like '%sbp%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем промокод на 100р"):            promocode_value = 100            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"type": "sum", "amount": promocode_value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем прайсрул на способ оплаты sbp со скидкой 10%"):            percent_value = 10            type_id = 2            discounts = {"type": "percent", "amount": percent_value, "deliveryPercent": 0}            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["sbp"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id,                                                                   discounts=discounts)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе рассчитывается согласно приоритету типов прайсрулов"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            variation_db = self.get_variation(id=variation)            calculate_price = round((variation_db["maximum_price"] - promocode_value) * (100 - percent_value) / 100)            assert item["calculatedPrice"] == calculate_price            assert item["discountAmount"] == variation_db["maximum_price"] - calculate_price            assert item["discountPercent"] == round(100 - calculate_price / variation_db["maximum_price"] * 100)    @allure.id("2423")    @allure.title("Иерархичное применение разных типов прайсрулов к товару со скидкой")    @allure.description(        "Проверяем, что при применении одновременно промокода и прайсрула на способы оплаты расчет скидки ведется по "        "приоритетам: сначала промокод, а затем прайсрул"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_priority_pricerules_payment_method_product_with_discount(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  prc.condition::text like '%podeli%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем промокод на 10%"):            percent_value = 10            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"type": "percent", "amount": percent_value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем прайсрул на способ оплаты podeli со скидкой 100р"):            sum_value = 100            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["podeli"]}]            discounts = {"type": "sum", "amount": sum_value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id,                                                                   discounts=discounts)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар со скидкой и свойством кроссаут, который есть в наличии"):            conditions = ["and v.maximum_price != v.current_price and v.crossout  = true and v.current_price>200"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with (allure.step(                "Проверяем, что сумма скидки в заказе рассчитывается согласно приоритету типов прайсрулов")):            item = cart_with_payment.json()["data"]["order"]["items"][0]            variation_db = self.get_variation(id=variation)            calculate_price = round(variation_db["current_price"] * (100 - percent_value) / 100) - sum_value            assert item["calculatedPrice"] == calculate_price            assert item["discountAmount"] == variation_db["maximum_price"] - calculate_price            assert item["discountPercent"] == round(100 - calculate_price / variation_db["maximum_price"] * 100)    @allure.id("2429")    @allure.title("Применение промокода со скидкой на сумму и на бесплатную доставку")    @allure.description(        "Проверяем, что при применении промокода со скидкой на сумма и на бесплатную доставку, применяется скидка  "        "сумма доставки везде выводится нулевая")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_rub_and_free_shipping(self):        with allure.step("Создаем промокод на сумму скидки и бесплатную доставку"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            value = 100            discounts = {"type": "sum", "amount": value, "deliveryPercent": 100}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Устанавливаем значение трешхолда больше суммы заказа, чтобы была платная доставка"):            key = "freeShippingSum"            config_bd = self.get_config_by_key(key=key)            freeShippingSum_value = cart_response.json()["data"]["order"]["resultTotal"]            configs_response = self.api_private_config.update_single(title=config_bd[0]["title"], key=key,                                                                     value=freeShippingSum_value + 1)            assert configs_response.status_code == 204        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе соответствует скидке в промокоде"):            item = cart_response.json()["data"]["order"]["items"][0]            assert item["discountAmount"] == value            assert item["maximumSum"] - item["calculatedSum"] == value            assert item["discountPercent"] == round(value / item["maximumSum"] * 100)        with allure.step("Проверяем, что значение leftToTreshold обнулилось"):            assert cart_response.json()["data"]["order"]["leftToTreshold"] == 0        with allure.step("Отправляем запрос на получение методов доставок"):            delivery_methods_response = self.api_delivery.get_delivery_methods(cart_uuid=cart_uuid)            assert delivery_methods_response.status_code == 200        with allure.step("Проверяем, что сумма доставки равна 0"):            assert delivery_methods_response.json()["data"][0]["price"] == 0            if len(delivery_methods_response.json()["data"]) > 1:                assert delivery_methods_response.json()["data"][1]["price"] == 0        with allure.step("Отправляем запрос на получение пикпоинтов"):            pickpoints_response = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickpoints_response.status_code == 200        with allure.step("Проверяем, что по всем пикпоинтам сумма доставки равна 0"):            count_zero = helpers.count_value_key_in_list(iterable=pickpoints_response.json()["data"],                                                         key="deliveryPrice", value=0)            assert count_zero == len(pickpoints_response.json()["data"])        with allure.step("Отправляем запрос на получение интервалов"):            address = utils.get_address()            intervals_response = self.api_delivery.get_intervals(cart_uuid=cart_uuid, address=address["intervals"])            assert intervals_response.status_code == 200        with allure.step("Проверяем, что по всем интервалам сумма доставки равна 0"):            intervals = intervals_response.json()["data"]["services"]            assert intervals[0]["priceMin"] == 0            if len(intervals) > 1:                assert intervals[1]["priceMin"] == 0        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickpoints_response.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма доставки в заказе равна 0"):            assert cart_with_shipping.json()["data"]["order"]["shipping"]["deliveryPrice"] == 0    @allure.id("2402")    @allure.title("Применение прайсрула на метод оплаты со скидкой на процент и на бесплатную доставку")    @allure.description(        "Проверяем, что при применении прайсрула на метод оплаты со скидкой на процент и на бесплатную доставку, "        "применяется скидка и обнуляется сумма доставки")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_percent_and_free_shipping(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  prc.condition::text like '%sbp%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты sbp со скидкой 10% и на бесплатную доставку"):            percent_value = 10            type_id = 2            discounts = {"type": "percent", "amount": percent_value, "deliveryPercent": 100}            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["sbp"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id,                                                                   discounts=discounts)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Устанавливаем значение трешхолда больше суммы заказа, чтобы была платная доставка"):            key = "freeShippingSum"            config_bd = self.get_config_by_key(key=key)            freeShippingSum_value = cart_response.json()["data"]["order"]["resultTotal"]            configs_response = self.api_private_config.update_single(title=config_bd[0]["title"], key=key,                                                                     value=freeShippingSum_value + 1)            assert configs_response.status_code == 204        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Проверяем, что стомость доставки в пвз платная"):            pickpoint = pickuppoints.json()["data"][0]            assert pickpoint["deliveryPrice"] > 0        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickpoint["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма скидки в заказе соответствует сумме скидки в прайсруле"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["discountPercent"] == percent_value            assert item["discountAmount"] == round(item["maximumSum"] * percent_value / 100)            assert item["calculatedSum"] == item["maximumSum"] - round(item["maximumSum"] * percent_value / 100)        with allure.step("Проверяем, что в заказе обнулилась доставка"):            shipping = cart_with_payment.json()["data"]["order"]["shipping"]            assert shipping["deliveryPrice"] == 0    @allure.title("Применение промокода, когда сумма заказа меньше суммы скидки")    @allure.description(        "Проверяем, что при применении промокода с суммой скидки больше суммы заказа, сумма заказа не становится "        "отрицательной, а стоимость каждого айтемса принимает значение 1"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_negative_discount(self):        with allure.step("Создаем промокод на 200р"):            value = 500            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            discounts = {"type": "sum", "amount": value, "deliveryPercent": 0}            create_pricerule_response = self.api_pricerules.create(discounts=discounts, promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товары без скидки, который есть в наличии, с ценой менее 200р"):            conditions = ["and v.maximum_price = v.current_price and v.current_price < 200"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма заказа не отрицательная, а сумма каждого айтемса равна 1"):            order = cart_response.json()["data"]["order"]            assert order["items"][0]["calculatedPrice"] == 1            assert order["items"][0]["discountAmount"] == order["items"][0]["maximumSum"] - 2            assert order["calculatedTotal"] == 2    @allure.title("Применение прайсрула на способ оплаты, когда сумма заказа меньше суммы скидки")    @allure.description(        "Проверяем, что при применении прайсрула на способ оплаты с суммой скидки больше суммы заказа, сумма заказа не "        "становится отрицательной, а сумма каждого айтемса принимает значение 1"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_negative_discount(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  prc.condition::text like '%sbp%' and prc.operand ='in' "]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты sbp со скидкой 500 рублей"):            value = 500            discounts = {"type": "sum", "amount": value, "deliveryPercent": 0}            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["sbp"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id,                                                                   discounts=discounts)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price and v.current_price < 200"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что сумма заказа не отрицательная, а сумма каждого айтемса равна 1"):            order = cart_with_payment.json()["data"]["order"]            assert order["items"][0]["calculatedPrice"] == 1            assert order["items"][0]["discountAmount"] == order["items"][0]["maximumSum"] - 2            assert order["calculatedTotal"] == 2