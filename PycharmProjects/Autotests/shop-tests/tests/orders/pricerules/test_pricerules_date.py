from datetime import date, timedelta, datetimeimport allurefrom allure_commons.types import Severityfrom mimesis import Text, Genericfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.private import CatalogPrivatefrom befree.api_model.orders.private import OrdersPrivateclass TestPricerulesDate(OrdersPublic, QueriesCatalog, CatalogPrivate, OrdersPrivate):    @allure.id("2366")    @allure.title("Применение промокода со статусом pending и ended")    @allure.description("Проверяем, что промокоды со статусом pending и ended не применяется в корзине")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_promocode_pending_and_ended(self):        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Создаем промокод, который еще не начал действовать"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            dateStart = (date.today() + timedelta(days=1)).strftime("%Y-%m-%d")            dateEnd = (date.today() + timedelta(days=2)).strftime("%Y-%m-%d")            create_pricerule_response = self.api_pricerules.create(dateStart=dateStart, dateEnd=dateEnd,                                                                   promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Создаем промокод, который уже закончил действовать"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            dateStart = (date.today() - timedelta(days=2)).strftime("%Y-%m-%d")            dateEnd = (date.today() - timedelta(days=1)).strftime("%Y-%m-%d")            create_pricerule_response = self.api_pricerules.create(dateStart=dateStart, dateEnd=dateEnd,                                                                   promocodes=promocodes)            assert create_pricerule_response.status_code == 201        with allure.step("Применяем промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"