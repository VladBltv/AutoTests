import allurefrom allure_commons.types import Severityfrom mimesis import Text, Person, Genericfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.private import CatalogPrivatefrom befree.api_model.orders.private import OrdersPrivatefrom befree.api_model.orders import utilsclass TestPricerulesPlatforms(OrdersPublic, QueriesCatalog, CatalogPrivate, OrdersPrivate):    @allure.id("2365")    @allure.title("Платформа в корзине является обязательным полем")    @allure.description(        "Проверяем, что если в методе корзины не отправлено поле с платформой, то в ответе будет приходить 422")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_platform_validate(self):        platform = "APP"        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину без поля платформы"):            cart_response = self.api_cart.create(items=items, platform=None)        with allure.step("Проверяем, что запрос прошел с ошибкой, в ответе 422"):            assert cart_response.status_code == 422        with allure.step("Создаем корзину c полем платформы"):            cart_response = self.api_cart.create(items=items, platform=platform)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой без поля платформы"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"],                                                             platform=None)        with allure.step("Проверяем, что запрос прошел с ошибкой, в ответе 422"):            assert cart_with_shipping.status_code == 422        with allure.step("Обновляем корзину с доставкой с полем платформы"):            cart_with_shipping = self.api_cart.update_pickup(                cart_uuid=cart_uuid, pickpoint_id=pickuppoints.json()["data"][0]["id"], platform=platform            )            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине без поля платформы"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer, platform=None)        with allure.step("Проверяем, что запрос прошел с ошибкой, в ответе 422"):            assert cart_with_customer.status_code == 422        with allure.step("Устанавливаем кастомера в корзине с полем платформы"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer, platform=platform)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp без поля платформу"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp", platform=None)        with allure.step("Проверяем, что запрос прошел с ошибкой, в ответе 422"):            assert cart_with_payment.status_code == 422        with allure.step("Обновляем корзину с методом оплаты sbp с поле платформы"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp", platform=platform)            assert cart_with_payment.json()["data"]["cartUuid"]    @allure.id("2372")    @allure.title("Проверка работы прайсрула с платформой web")    @allure.description("Проверяем, что прайсрул с платформой web применяется для desktop и mobile")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_platform_web(self):        with allure.step("Создаем промокод с платформой web"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "platform", "operand": "in", "condition": ["web"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину с платформой app"):            cart_response = self.api_cart.create(items=items, platform="APP")            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод с платформой desktop в корзине с платформой арр"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="APP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Применяем промокод с платформой desktop в корзине с платформой desktop"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None        with allure.step("Сбрасываем промокод в корзине"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=None, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод с платформой desktop в корзине с платформой mobile"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="MOBILE")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2371")    @allure.title("Проверка работы прайсрула с платформой app")    @allure.description("Проверяем, что прайсрул с платформой app применяется для app")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_platform_app(self):        with allure.step("Создаем промокод с платформой app"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "platform", "operand": "in", "condition": ["app"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину с платформой desktop"):            cart_response = self.api_cart.create(items=items, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод с платформой app в корзине с платформой desktop"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Применяем промокод с платформой app в корзине с платформой mobile"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="MOBILE")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился и выводится нотификация"):            assert cart_response.json()["data"]["order"]["promocode"] == None            assert cart_response.json()["data"]["notifications"][0]["entity"] == "promocode"        with allure.step("Применяем промокод с платформой app в корзине с платформой app"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="APP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2372")    @allure.title("Проверка работы прайсрула с платформой web+app")    @allure.description("Проверяем, что прайсрул с платформой web+app применяется для всех типов платформ в корзине")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_platform_web_and_app(self):        with allure.step("Создаем промокод с платформой web+app"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "platform", "operand": "in", "condition": ["web", "app"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину с платформой desktop"):            cart_response = self.api_cart.create(items=items, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод в корзине с платформой desktop"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None        with allure.step("Сбрасываем промокод в корзине"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=None, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод в корзине с платформой mobile"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="MOBILE")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None        with allure.step("Сбрасываем промокод в корзине"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=None, platform="DESKTOP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод в корзине с платформой app"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="APP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None    @allure.id("2361")    @allure.title("Прайсрул сбрасывается, если изменилась платформа")    @allure.description(        "Проверяем, что если в корзине был применен прайсрул, подходящий под определенную платформу, "        "то при смене платформы прайсрул перестает действовать"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_change_platform(self):        with allure.step("Создаем промокод с платформой app"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "platform", "operand": "in", "condition": ["app"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар, который есть в наличии"):            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1)            items = [{"id": variation, "qty": 1}]        with allure.step("Создаем корзину с платформой app"):            cart_response = self.api_cart.create(items=items, platform="APP")            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем промокод в корзине с платформой app"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode, platform="APP")            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился и нотификация не выводится"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True            assert cart_response.json()["data"]["notifications"] == None        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой и платформой mobile"):            cart_with_shipping = self.api_cart.update_pickup(                cart_uuid=cart_uuid, pickpoint_id=pickuppoints.json()["data"][0]["id"], platform="MOBILE"            )            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Проверяем, что запрос прошел без ошибки, промокод в корзине остался, но перестал "                         "действовать"):            assert cart_with_shipping.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_with_shipping.json()["data"]["order"]["promocode"]["applied"] == False