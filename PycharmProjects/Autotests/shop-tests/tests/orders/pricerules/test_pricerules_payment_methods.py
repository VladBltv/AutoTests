import allurefrom allure_commons.types import Severityfrom befree.api_model.orders import utilsfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.config.db_queries.queries import QueriesConfigfrom befree.api_model.orders.db_queries.queries import QueriesOrdersfrom befree.api_model.config.private import ConfigPrivatefrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.orders.private import OrdersPrivateclass TestPricerulesPaymentMethods(OrdersPublic, QueriesCatalog, OrdersPrivate, QueriesConfig, ConfigPrivate,                                   QueriesOrders):    @allure.id("2409")    @allure.title("Применение прайсрула на способ оплаты podeli")    @allure.description(        "Проверяем, что прайсрул на метод оплаты применется только на тот метод оплаты, который указан в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_podeli(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  ((prc.condition::text like '%cash%' and prc.operand ='in') "                         "or  (prc.condition::text like '%podeli%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sbp%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sber%' and prc.operand ='in' ))"]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты podeli"):            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["podeli"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sber"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sber")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]    @allure.id("2403")    @allure.title("Применение прайсрула на способ оплаты sber")    @allure.description(        "Проверяем, что прайсрул на метод оплаты применется только на тот метод оплаты, который указан в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_sber(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  ((prc.condition::text like '%cash%' and prc.operand ='in') "                         "or  (prc.condition::text like '%podeli%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sbp%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sber%' and prc.operand ='in' ))"]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты sber"):            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["sber"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sber"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sber")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]    @allure.id("2415")    @allure.title("Применение прайсрула на способ оплаты sbp")    @allure.description(        "Проверяем, что прайсрул на метод оплаты применется только на тот метод оплаты, который указан в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_sbp(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  ((prc.condition::text like '%cash%' and prc.operand ='in') "                         "or  (prc.condition::text like '%podeli%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sbp%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sber%' and prc.operand ='in' ))"]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты sbp"):            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["sbp"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sber"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sber")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]    @allure.id("2424")    @allure.title("Применение прайсрула на способ оплаты cash")    @allure.description(        "Проверяем, что прайсрул на метод оплаты применется только на тот метод оплаты, который указан в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_method_cash(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  ((prc.condition::text like '%cash%' and prc.operand ='in') "                         "or  (prc.condition::text like '%podeli%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sbp%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sber%' and prc.operand ='in' ))"]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты cash"):            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["cash"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sber"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sber")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]    @allure.id("2425")    @allure.title("Применение прайсрула на способы оплаты sbp и sber")    @allure.description(        "Проверяем, что прайсрул на метод оплаты применется только на те метод оплаты, который указаны в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_methods_sbp_and_sber(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  ((prc.condition::text like '%cash%' and prc.operand ='in') "                         "or  (prc.condition::text like '%podeli%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sbp%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sber%' and prc.operand ='in' ))"]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способ оплаты sbp и sber"):            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["sbp", "sber"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sber"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sber")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]    @allure.id("2426")    @allure.title("Применение прайсрула на способы оплаты podeli, sbp и sber")    @allure.description(        "Проверяем, что прайсрул на метод оплаты применется только на те метод оплаты, который указаны в прайсруле"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_methods_podeli_and_sbp_and_sber(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  ((prc.condition::text like '%cash%' and prc.operand ='in') "                         "or  (prc.condition::text like '%podeli%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sbp%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sber%' and prc.operand ='in' ))"]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на способы оплаты podeli, sbp и sber"):            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["podeli", "sbp", "sber"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sber"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sber")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка не применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] == item["calculatedSum"]    @allure.id("2416")    @allure.title("Применение прайсрула на все способы оплаты")    @allure.description(        "Проверяем, что прайсрул действует на все на методы оплаты"    )    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_payment_methods_all(self):        with allure.step("Софтделитим прайсрулы в бд, которые могут помешать выполнению теста"):            condition = ["and  ((prc.condition::text like '%cash%' and prc.operand ='in') "                         "or  (prc.condition::text like '%podeli%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sbp%' and prc.operand ='in') "                         "or  (prc.condition::text like '%sber%' and prc.operand ='in' ))"]            utils.softdelete_pricerules(condition=condition)        with allure.step("Создаем прайсрул на все способы оплаты"):            type_id = 2            conditions = [{"type": "paymentMethod", "operand": "in", "condition": ["podeli", "sbp", "sber", "cash"]}]            create_pricerule_response = self.api_pricerules.create(conditions=conditions, typeId=type_id)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар без скидки, который есть в наличии"):            conditions = ["and v.maximum_price = v.current_price"]            variation = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            items = [{"id": variation, "qty": 2}]        with allure.step("Создаем корзину"):            cart_response = self.api_cart.create(items=items)            assert cart_response.json()["data"]["cartUuid"]            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Ищем доступный ПВЗ"):            pickuppoints = self.api_delivery.get_pickpoints(cart_uuid=cart_uuid, methods=["pickup"])            assert pickuppoints.status_code == 200        with allure.step("Обновляем корзину с доставкой"):            cart_with_shipping = self.api_cart.update_pickup(cart_uuid=cart_uuid,                                                             pickpoint_id=pickuppoints.json()["data"][0]["id"])            assert cart_with_shipping.json()["data"]["cartUuid"]        with allure.step("Устанавливаем кастомера в корзине"):            customer = utils.generate_customer_data()            cart_with_customer = self.api_cart.set_customer(cart_uuid=cart_uuid, customer=customer)            assert cart_with_customer.json()["data"]["cartUuid"]        with allure.step("Обновляем корзину с методом оплаты podeli"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="podeli")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sbp"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sbp")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты sber"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="sber")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]        with allure.step("Обновляем корзину с методом оплаты cash"):            cart_with_payment = self.api_cart.update_payment(cart_uuid=cart_uuid, method="cash")            assert cart_with_payment.json()["data"]["cartUuid"]        with allure.step("Проверяем, что скидка применилась"):            item = cart_with_payment.json()["data"]["order"]["items"][0]            assert item["maximumSum"] != item["calculatedSum"]