import allurefrom allure_commons.types import Severityfrom mimesis import Text, Genericfrom befree.api_model.catalog import utilsfrom befree.api_model.orders.public import OrdersPublicfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.private import CatalogPrivatefrom befree.api_model.orders.private import OrdersPrivateclass TestPricerulesCombinationSelections(OrdersPublic, QueriesCatalog, CatalogPrivate, OrdersPrivate):    @allure.id("2428")    @allure.title("Промокод с отбором по стикеру new и подборкам")    @allure.description("Проверяем, что промокод применяется только к тем товарам, у которых есть стикер нью и "                        "которые принадлежат какой-либо из указанных подборок")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_new_and_compilations(self):        with allure.step("Находим товар1, у которого есть стикер нью"):            conditions = ["and p.sticker_new = true"]            variation1 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product1 = self.get_product_by_variation(variation_id=variation1)        with allure.step("Создаем подборку, состоящую только из этого товара"):            compilation = utils.generate_compilation_by_articles(articles=[product1["article"]])            compilation_id1 = compilation["data"]["id"]        with allure.step("Находим другой товар2, у которого нет стикера нью"):            conditions = [f'and p.sticker_new = false']            variation2 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product2 = self.get_product_by_variation(variation_id=variation2)        with allure.step("Создаем подборку, состоящую только из второго товара"):            compilation = utils.generate_compilation_by_articles(articles=[product2["article"]])            compilation_id2 = compilation["data"]["id"]        with allure.step("Находим товар3, у которого нет стикера нью"):            conditions = ["and p.sticker_new = false"]            variation3 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем промокод, действующий на товары со стикером new и на созданные подборки"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "in", "condition": ["new"]},                          {"type": "compilations", "operand": "in", "condition": [int(compilation_id1),                                                                                  int(compilation_id2)]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину с товаром1"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром2"):            items = [{"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товаром3"):            items = [{"id": variation3, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None    @allure.id("2417")    @allure.title("Промокод с отбором по стикеру sale и категориями")    @allure.description("Проверяем, что промокод применяется только к тем товарам, у которых есть стикер sale и "                        "которые принадлежат какой-либо из указанных категорий")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_sale_and_categories(self):        with allure.step("Находим товар1, у которого есть привязанный атрибут sale"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 1"]            variation1 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            product1 = self.get_product_by_variation(variation_id=variation1)            category_id1 = product1["category_id"]        with allure.step("Находим товар2, у которого нет привязанного атрибут sale"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 2"]            variation2 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            product2 = self.get_product_by_variation(variation_id=variation2)            category_id2 = product2["category_id"]        with allure.step("Находим товар3, у которого есть привязанный атрибут sale, но не принадлежит категориям "                         "первого и второго товара"):            conditions = [f"and vav.attribute_id = 6 and vav.attribute_value_id = 1 "                          f"and p.category_id not in ({category_id1},{category_id2})"]            variation3 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем промокод, действующий на товары со стикером sale и на категории первого и второго "                         "товара"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "in", "condition": ["sale"]},                          {"type": "compilations", "operand": "in",                           "condition": [int(category_id1), int(category_id2)]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину с товаром1"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром2"):            items = [{"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товаром3"):            items = [{"id": variation3, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None    @allure.id("2422")    @allure.title("Промокод с отбором без стикера sale, категории и подборке")    @allure.description("Проверяем, что промокод применяется только к тем товарам, у которых нет стикер sale, и "                        "которые принадлежат указанной категории или подборке")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_not_sale_and_category_and_compilation(self):        with allure.step("Находим товар1, у которого нет привязанного атрибута sale"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 2"]            variation1 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            product1 = self.get_product_by_variation(variation_id=variation1)            category_id1 = product1["category_id"]        with allure.step("Находим товар2, у которого есть привязанного атрибут sale"):            conditions = ["and vav.attribute_id = 6 and vav.attribute_value_id = 1"]            variation2 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            product2 = self.get_product_by_variation(variation_id=variation2)        with allure.step("Создаем подборку, состоящую из первого и второго товара"):            compilation = utils.generate_compilation_by_articles(articles=[product1["article"], product2["article"]])            compilation_id = compilation["data"]["id"]        with allure.step("Находим товар3, у которого нет привязанного атрибута sale, и  принадлежит категории "                         "первого товара"):            conditions = [f"and vav.attribute_id = 6 and vav.attribute_value_id = 2"                          f"and p.category_id ={category_id1}"]            variation3 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Находим товар4, у которого есть привязанный атрибута sale, и  принадлежит категории "                         "первого товара"):            conditions = [f"and vav.attribute_id = 6 and vav.attribute_value_id = 1"                          f"and p.category_id ={category_id1}"]            variation4 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем промокод, действующий на товары без стикера sale, на категорию первого товара и "                         "подборку, состояющую из первого и второго товара"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "notIn", "condition": ["sale"]},                          {"type": "compilations", "operand": "in",                           "condition": [int(category_id1), int(compilation_id)]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину с товаром1"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром2"):            items = [{"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товаром3"):            items = [{"id": variation3, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром4"):            items = [{"id": variation4, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None    @allure.id("2411")    @allure.title("Промокод с отбором без стикера new и не применять к списку артикулов")    @allure.description("Проверяем, что промокод применяется только к тем товарам, у которых нет стикер new, и "                        "которые не указаны в списке ограничений")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_not_new_and_dont_apply_to_list(self):        with allure.step("Находим товар1, у которого нет стикера нью"):            conditions = ["and p.sticker_new = false"]            variation1 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product1 = self.get_product_by_variation(variation_id=variation1)        with allure.step("Находим другой товар2, у которого нет стикера нью"):            conditions = [f'and p.sticker_new = false and p.article != \'{product1["article"]}\'']            variation2 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product2 = self.get_product_by_variation(variation_id=variation2)        with allure.step("Находим другой товар3, у которого есть стикер нью"):            conditions = [f'and p.sticker_new = true']            variation3 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем промокод, действующий на товары без стикера new, с ограничением на список, "                         "состоящий из второго товара"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "notIn", "condition": ["new"]},                          {"type": "articles", "operand": "notIn", "condition": [f"{product2["article"]}"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину с товаром1"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром2"):            items = [{"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товаром3"):            items = [{"id": variation3, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None    @allure.id("2430")    @allure.title("Промокод с отбором по подборке и удаленной подборке")    @allure.description("Проверяем, что промокод применяется на товары, которые принадлежат подборке, "                        "которая не была удалена")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_compilation_and_deleted_compilation(self):        with allure.step("Находим товар1, который есть в наличии"):            variation1 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1)            product1 = self.get_product_by_variation(variation_id=variation1)        with allure.step("Создаем подборку, состоящую только из этого товара"):            compilation = utils.generate_compilation_by_articles(articles=[product1["article"]])            compilation_id1 = compilation["data"]["id"]        with allure.step("Находим другой товар2, который есть в наличии"):            conditions = [f"and p.article != '{product1["article"]}'"]            variation2 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product2 = self.get_product_by_variation(variation_id=variation2)        with allure.step("Создаем подборку, состоящую только из второго товара"):            compilation = utils.generate_compilation_by_articles(articles=[product2["article"]])            compilation_id2 = compilation["data"]["id"]        with allure.step("Создаем промокод, действующий на товары из созданных подборок"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "compilations", "operand": "in",                           "condition": [int(compilation_id1), int(compilation_id2)]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Удаляем подборку с товаром2"):            delete_response = self.api_compilations.delete(compilation_id=compilation_id2)            assert delete_response.status_code == 200        with allure.step("Создаем корзину с товаром1"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром2"):            items = [{"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None    @allure.id("2432")    @allure.title("Промокод с отбором по стикеру new, подборке и не применять к списку")    @allure.description("Проверяем, что промокод применяется только к тем товарам, у которых есть стикер нью и "                        "которые принадлежат указанной подборке и не состоят в исключающем списке")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_new_and_compilation_and_dont_apply_to_list(self):        with allure.step("Находим товар1, у которого есть стикер нью"):            conditions = ["and p.sticker_new = true"]            variation1 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product1 = self.get_product_by_variation(variation_id=variation1)        with allure.step("Находим товар2, у которого есть стикер нью"):            conditions = [f"and p.sticker_new = true and p.article != '{product1["article"]}'"]            variation2 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product2 = self.get_product_by_variation(variation_id=variation2)        with allure.step("Находим товар3, у которого есть стикер нью"):            conditions = [                f"and p.sticker_new = true and p.article not in ('{product1["article"]}','{product2["article"]}')"]            variation3 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Находим товар4, у которого нет стикера нью"):            conditions = ["and p.sticker_new = false"]            variation4 = self.find_omniAndSf_stocks(qty=3, city_id=2, store_id=1, conditions=conditions)            product4 = self.get_product_by_variation(variation_id=variation4)        with allure.step("Создаем подборку, состоящую из первого и второго и четвертого товара"):            compilation = utils.generate_compilation_by_articles(articles=[product1["article"], product2["article"],                                                                           product4["article"]])            compilation_id = compilation["data"]["id"]        with allure.step("Создаем промокод, действующий на товары со стикером нью, на созданную подборку и "                         "ограничением на список, в котором находится второй товар"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "in", "condition": ["new"]},                          {"type": "compilations", "operand": "in", "condition": [int(compilation_id)]},                          {"type": "articles", "operand": "notIn", "condition": [f"{product2["article"]}"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину с товаром1"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром2"):            items = [{"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товаром3"):            items = [{"id": variation3, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товаром4"):            items = [{"id": variation4, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None    @allure.id("2413")    @allure.title("Промокод с отбором по подборке и не применять к списку")    @allure.description(        "Проверяем, что промокод применяется только к тем товарам, которые принадлежат указанной подборке и не состоят в исключающем списке")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_compilation_and_dont_apply_to_list(self):        with allure.step("Находим товар1, который есть в наличии"):            variation1 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1)            product1 = self.get_product_by_variation(variation_id=variation1)        with allure.step("Находим товар2, который не совпадает с первым товаром"):            conditions = [f"and p.article != '{product1["article"]}'"]            variation2 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)            product2 = self.get_product_by_variation(variation_id=variation2)        with allure.step("Находим товар3, который не совпадает с первым и вторым товаром"):            conditions = [f"and p.article not in ('{product1["article"]}','{product2["article"]}')"]            variation3 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем подборку, состоящую из первого и второго товара"):            compilation = utils.generate_compilation_by_articles(articles=[product1["article"], product2["article"]])            compilation_id = compilation["data"]["id"]        with allure.step("Создаем промокод, действующий на товары созданную подборку и "                         "ограничением на список, в котором находится второй товар"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "compilations", "operand": "in", "condition": [int(compilation_id)]},                          {"type": "articles", "operand": "notIn", "condition": [f"{product2["article"]}"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Создаем корзину с товаром1"):            items = [{"id": variation1, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Создаем корзину с товаром2"):            items = [{"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None        with allure.step("Создаем корзину с товаром3"):            items = [{"id": variation3, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод не применился"):            assert cart_response.json()["data"]["order"]["promocode"] == None    @allure.id("2814")    @allure.title("Промокод с отбором по стикеру new применяется только к товарам со стикером нью")    @allure.description("Проверяем, что промокод применяется только на товары, у которых есть стикер нью в одной "                        "корзине")    @allure.tag("API Test")    @allure.severity(Severity.CRITICAL)    @allure.suite("Checkout")    @allure.label("owner", "Balakireva")    @allure.label("Service", "Orders")    @allure.label("feature", "Прайсрулы")    def test_selection_by_sticker_new_partly(self):        with allure.step("Создаем промокод, действующий на товары со стикером new"):            promocode = Text("en").word() + str(Generic().random.randint(1, 100))            promocodes = {"counterType": "general", "counterAmount": 1, "values": [promocode]}            conditions = [{"type": "stickers", "operand": "in", "condition": ["new"]}]            create_pricerule_response = self.api_pricerules.create(promocodes=promocodes, conditions=conditions)            assert create_pricerule_response.status_code == 201        with allure.step("Находим товар со стикером new, которые есть в наличии"):            conditions = ["and p.sticker_new = true"]            variation1 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Находим товар без стикера new, которые есть в наличии"):            conditions = ["and p.sticker_new = false"]            variation2 = self.find_omniAndSf_stocks(qty=2, city_id=2, store_id=1, conditions=conditions)        with allure.step("Создаем корзину"):            items = [{"id": variation1, "qty": 1}, {"id": variation2, "qty": 1}]            cart_response = self.api_cart.create(items=items)            cart_uuid = cart_response.json()["data"]["cartUuid"]        with allure.step("Применяем в корзине промокод"):            cart_response = self.api_cart.update_promocode(cart_uuid=cart_uuid, promocode=promocode)            assert cart_response.json()["data"]["cartUuid"]        with allure.step("Проверяем, что промокод применился"):            assert cart_response.json()["data"]["order"]["promocode"]["value"] == promocode            assert cart_response.json()["data"]["order"]["promocode"]["applied"] == True        with allure.step("Проверяем, что промокод применился только на товар со стикером нью"): ...