import jsonimport allurefrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.public import CatalogPublicfrom allure_commons.types import Severityfrom befree.api_model.catalog.public.product import shemasfrom pytest_voluptuous import Sclass TestProduct(QueriesCatalog, CatalogPublic):    @allure.id("3014")    @allure.title("Преобразование структуры значения атрибута 'состав' для страницы товара")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Товары")    @allure.description("""Проверяем, что в meta преобразуется структура для значения атрибута свойство (поле     meta.attribute_values) по следующим правилам:     * разделитель - ";"    * поле name - ЕСЛИ в строке есть символ ":" ТОГДА записываем все ДО него в параметр "name" ИНАЧЕ name = NULL    * поле value - ЕСЛИ в строке есть символ ":" ТОГДА в value записываем в массив строк данные после ":". Символ ",    " разделяет строки этого массиваИНАЧЕ записываем значения учитывая разделитель через ","  ИЛИ NULL """)    def test_product_attribute_composition(self):        with allure.step("Запрашиваем товар, у которого нет атрибута 'состав'"):            product_response = self.api_product.get(article='BF2445266001')            assert product_response.status_code == 200        with allure.step("Проверяем, что в meta не приходит информация по атрибуту свойство (id = 104)"):            product_string = json.dumps(product_response.json(), indent=4, sort_keys=True)            assert product_string.find('"104":') == -1        with allure.step("Запрашиваем товар, у которого есть атрибут 'состав', но в составе нет наименований"):            product_response = self.api_product.get(article='BF2531123014')            assert product_response.status_code == 200        with allure.step("Проверяем, что полученная структура соответствует схеме (поле name = null)"):            attribute_value = product_response.json()["meta"]["attribute_values"]["1646"]            assert S(shemas.attribute_composition_without_name) == attribute_value        with allure.step("Запрашиваем товар, у которого есть атрибут 'состав'и в составе есть наименования"):            product_response = self.api_product.get(article='BF2534831147')            assert product_response.status_code == 200        with allure.step("Проверяем, что полученная структура соответствует схеме"):            attribute_value = product_response.json()["meta"]["attribute_values"]["266"]            assert S(shemas.attribute_composition_with_name) == attribute_value        with allure.step("Запрашиваем товар, у которого есть атрибут 'состав' и в составе одновременно есть и нет"                         "наименования"):            product_response = self.api_product.get(article='BF2531201002')            assert product_response.status_code == 200        with allure.step("Проверяем, что полученная структура соответствует схеме"):            attribute_value = product_response.json()["meta"]["attribute_values"]["1507"]            assert S(shemas.attribute_composition_name) == attribute_value