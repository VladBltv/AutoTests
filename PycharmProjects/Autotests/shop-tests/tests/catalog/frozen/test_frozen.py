import allurefrom befree.api_model.catalog.db_queries.queries import QueriesCatalogfrom befree.api_model.catalog.private import CatalogPrivatefrom allure_commons.types import Severityfrom utils import filesclass TestFrozen(QueriesCatalog, CatalogPrivate):    @allure.id("2570")    @allure.title("Заморозка товара по всем складам")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Замораживаем товар по всем складам и проверяем, что он заморозился в бд и через апи"    )    def test_frozen_all_stores(self):        with allure.step("Находим артикул товара, который не заморожен"):            conditions = [                "deleted_at is null and fulfilment_frozen = false and omni2_frozen = false and omni_frozen = false"            ]            product = self.get_product_by_conditions(conditions=conditions)        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Замораживаем товар по всем складам"):            frozen_response = self.api_frozen.update(                frozen_type=["omni", "fulfilment", "omni2"], article=product["article"]            )            assert frozen_response.status_code == 200        with allure.step("Проверяем, что товар заморозился по всем складам"):            with allure.step("Анализируем ответ запроса заморозки"):                get_frozen_response = self.api_frozen.get()                assert get_frozen_response.status_code == 200                frozen = get_frozen_response.json()["data"]                assert frozen["fulfilment"] == 1                assert frozen["omni"] == 1                assert frozen["omni2"] == 1            with allure.step("Проверяем флаги в бд"):                frozen = self.check_frozen(article=product["article"])                assert frozen["fulfilment_frozen"] == True                assert frozen["omni2_frozen"] == True                assert frozen["omni_frozen"] == True    @allure.id("2571")    @allure.title("Заморозка товара по одному складу")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Замораживаем товар по одному складу и проверяем, что он заморозился в бд и через апи"    )    def test_frozen_one_store(self):        with allure.step("Находим артикул товара, который не заморожен"):            conditions = [                "deleted_at is null and fulfilment_frozen = false and omni2_frozen = false and omni_frozen = false"            ]            product = self.get_product_by_conditions(conditions=conditions)        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Замораживаем товар только по омни"):            frozen_response = self.api_frozen.update(                frozen_type=["omni"], article=product["article"]            )            assert frozen_response.status_code == 200        with allure.step("Проверяем, что товар заморозился только в омни"):            with allure.step("Анализируем ответ запроса заморозки"):                get_frozen_response = self.api_frozen.get()                assert get_frozen_response.status_code == 200                frozen = get_frozen_response.json()["data"]                assert frozen["fulfilment"] == 0                assert frozen["omni"] == 1                assert frozen["omni2"] == 0            with allure.step("Проверяем флаги в бд"):                frozen = self.check_frozen(article=product["article"])                assert frozen["fulfilment_frozen"] == False                assert frozen["omni2_frozen"] == False                assert frozen["omni_frozen"] == True    @allure.id("2567")    @allure.title("Заморозка товара по двум складам")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Замораживаем товар по двум складам и проверяем, что он заморозился в бд и через апи"    )    def test_frozen_two_stores(self):        with allure.step("Находим артикул товара, который не заморожен"):            conditions = [                "deleted_at is null and fulfilment_frozen = false and omni2_frozen = false and omni_frozen = false"            ]            product = self.get_product_by_conditions(conditions=conditions)        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Замораживаем товар в фф и омни2"):            frozen_response = self.api_frozen.update(                frozen_type=["fulfilment", "omni2"], article=product["article"]            )            assert frozen_response.status_code == 200        with allure.step("Проверяем, что товар заморозился в фф и омни2"):            with allure.step("Анализируем ответ запроса заморозки"):                get_frozen_response = self.api_frozen.get()                assert get_frozen_response.status_code == 200                frozen = get_frozen_response.json()["data"]                assert frozen["fulfilment"] == 1                assert frozen["omni"] == 0                assert frozen["omni2"] == 1            with allure.step("Проверяем флаги в бд"):                frozen = self.check_frozen(article=product["article"])                assert frozen["fulfilment_frozen"] == True                assert frozen["omni2_frozen"] == True                assert frozen["omni_frozen"] == False    @allure.id("2575")    @allure.title("Заморозка удаленного товара")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Замораживаем удаленный товар и проверяем, что он не заморозился в бд и через апи"    )    def test_frozen_deleted_product(self):        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Находим удаленный товар"):            conditions = ["deleted_at is not null"]            product = self.get_product_by_conditions(conditions=conditions)        with allure.step("Замораживаем удаленный товар"):            frozen_response = self.api_frozen.update(                frozen_type=["omni"], article=product["article"]            )            assert frozen_response.status_code == 200        with allure.step("Проверяем, что никакой товар в заморозку не попал"):            get_frozen_response = self.api_frozen.get()            assert get_frozen_response.status_code == 200            frozen = get_frozen_response.json()["data"]            assert frozen["fulfilment"] == 0            assert frozen["omni"] == 0            assert frozen["omni2"] == 0    @allure.id("2569")    @allure.title("Заморозка несуществующего товара")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Замораживаем несуществующий товар и проверяем, что в морозилка не изменилась"    )    def test_frozen_non_existent_product(self):        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Замораживаем несуществующий товар"):            frozen_response = self.api_frozen.update(frozen_type=["omni"], article="123456")            assert frozen_response.status_code == 200        with allure.step("Проверяем, что никакой товар в заморозку не попал"):            get_frozen_response = self.api_frozen.get()            assert get_frozen_response.status_code == 200            frozen = get_frozen_response.json()["data"]            assert frozen["fulfilment"] == 0            assert frozen["omni"] == 0            assert frozen["omni2"] == 0    @allure.id("2568")    @allure.title("Разморозка товара по всем складам")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Размораживаем товар по всем складам и проверяем, что он разморозился в бд и через апи"    )    def test_unfreeze_all_stores(self):        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Находим артикул товара"):            conditions = ["deleted_at is null"]            product = self.get_product_by_conditions(conditions=conditions)        with allure.step("Замораживаем товар по всем складам"):            frozen_response = self.api_frozen.update(                frozen_type=["omni", "fulfilment", "omni2"], article=product["article"]            )            assert frozen_response.status_code == 200        with allure.step("Размораживаем товар по всем складам"):            unfreeze_response = self.api_frozen.update(                frozen_type=["omni", "fulfilment", "omni2"],                article=product["article"],                is_delete="1",            )            assert unfreeze_response.status_code == 200        with allure.step("Проверяем, что товар разморозился по всем складам"):            with allure.step("Анализируем ответ запроса заморозки"):                get_frozen_response = self.api_frozen.get()                assert get_frozen_response.status_code == 200                frozen = get_frozen_response.json()["data"]                assert frozen["fulfilment"] == 0                assert frozen["omni"] == 0                assert frozen["omni2"] == 0            with allure.step("Проверяем флаги в бд"):                frozen = self.check_frozen(article=product["article"])                assert frozen["fulfilment_frozen"] == False                assert frozen["omni2_frozen"] == False                assert frozen["omni_frozen"] == False    @allure.id("2573")    @allure.title("Разморозка товара по одному складу")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Размораживаем товар по одному складу и проверяем, что он разморозился в бд и через апи"    )    def test_unfreeze_one_store(self):        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Находим артикул товара"):            conditions = ["deleted_at is null"]            product = self.get_product_by_conditions(conditions=conditions)        with allure.step("Замораживаем товар по всем складам"):            frozen_response = self.api_frozen.update(                frozen_type=["omni", "fulfilment", "omni2"], article=product["article"]            )            assert frozen_response.status_code == 200        with allure.step("Размораживаем товар по складу омни"):            unfreeze_response = self.api_frozen.update(                frozen_type=["omni"], article=product["article"], is_delete="1"            )            assert unfreeze_response.status_code == 200        with allure.step("Проверяем, что товар разморозился только по омни"):            with allure.step("Анализируем ответ запроса заморозки"):                get_frozen_response = self.api_frozen.get()                assert get_frozen_response.status_code == 200                frozen = get_frozen_response.json()["data"]                assert frozen["fulfilment"] == 1                assert frozen["omni"] == 0                assert frozen["omni2"] == 1            with allure.step("Проверяем флаги в бд"):                frozen = self.check_frozen(article=product["article"])                assert frozen["fulfilment_frozen"] == True                assert frozen["omni2_frozen"] == True                assert frozen["omni_frozen"] == False    @allure.id("2576")    @allure.title("Разморозка товара по двум складам")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Размораживаем товар по двум складам и проверяем, что он разморозился в бд и через апи"    )    def test_unfreeze_two_store(self):        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Находим артикул товара"):            conditions = ["deleted_at is null"]            product = self.get_product_by_conditions(conditions=conditions)        with allure.step("Замораживаем товар по всем складам"):            frozen_response = self.api_frozen.update(                frozen_type=["omni", "fulfilment", "omni2"], article=product["article"]            )            assert frozen_response.status_code == 200        with allure.step("Размораживаем товар по фф и омни2"):            unfreeze_response = self.api_frozen.update(                frozen_type=["fulfilment", "omni2"], article=product["article"], is_delete="1"            )            assert unfreeze_response.status_code == 200        with allure.step("Проверяем, что товар разморозился только по фф и омни2"):            with allure.step("Анализируем ответ запроса заморозки"):                get_frozen_response = self.api_frozen.get()                assert get_frozen_response.status_code == 200                frozen = get_frozen_response.json()["data"]                assert frozen["fulfilment"] == 0                assert frozen["omni"] == 1                assert frozen["omni2"] == 0            with allure.step("Проверяем флаги в бд"):                frozen = self.check_frozen(article=product["article"])                assert frozen["fulfilment_frozen"] == False                assert frozen["omni2_frozen"] == False                assert frozen["omni_frozen"] == True    @allure.id("2574")    @allure.title("Разморозка несуществующего товара ")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description(        "Размораживаем несуществующий товар и проверяем, что морозилка не изменилась"    )    def test_unfreeze_non_existent_product(self):        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Запрашиваем количество товаров в морозилке"):            get_frozen_response = self.api_frozen.get()            assert get_frozen_response.status_code == 200            before = get_frozen_response.json()["data"]        with allure.step("Размораживаем несуществующий товар"):            unfreeze_response = self.api_frozen.update(                frozen_type=["omni"], article="123456", is_delete="1"            )            assert unfreeze_response.status_code == 200        with allure.step("Проверяем, что ничего не изменилось"):            get_frozen_response = self.api_frozen.get()            assert get_frozen_response.status_code == 200            after = get_frozen_response.json()["data"]            assert before == after    @allure.id("2572")    @allure.title("Заморозка и разморозка товара через файл")    @allure.label("service", "Catalog")    @allure.label("owner", "balakirevams")    @allure.severity(Severity.CRITICAL)    @allure.suite("Listing")    @allure.suite("Product")    @allure.label("feature", "Морозилка")    @allure.description("Замораживаем и размораживаем товары, передавая артикулы через файл")    def test_frozen_and_unfreeze_by_file(self):        with allure.step("Находим 10 артикулов товара, которые не удалены"):            products = self.get_product_articles()            articles = [i["article"] for i in products]        with allure.step("Очищаем морозилку от всех товаров"):            delete_response = self.api_frozen.delete()            assert delete_response.status_code == 200        with allure.step("Записываем артикул товара в файл"):            files.write_lines(                files.generate_absolute_path("resources/article_frozen.csv"), articles            )            test_file = open(files.generate_absolute_path("resources/article_frozen.csv"), "rb")        with allure.step(            "Замораживаем товар по всем складам, отправляя в запросе артикулы через файл"        ):            update_response = self.api_frozen.update_with_file(                frozen_type=["omni", "fulfilment"], products_file=test_file            )            assert update_response.status_code == 200        with allure.step("Проверяем, что товар заморозился только в фф и омни"):            value_bd = [self.check_frozen(article=articles[i]) for i in range(len(articles))]            assert all(item["omni_frozen"] == True for item in value_bd)            assert all(item["omni2_frozen"] == False for item in value_bd)            assert all(item["fulfilment_frozen"] == True for item in value_bd)        with allure.step("Размораживаем товар в фф, отправляя в запросе артикулы через файл"):            test_file = open(files.generate_absolute_path("resources/article_frozen.csv"), "rb")            update_response = self.api_frozen.update_with_file(                frozen_type=["fulfilment"], products_file=test_file, is_delete="1"            )            assert update_response.status_code == 200        with allure.step("Проверяем, что товар разморозился только по складу фф"):            value_bd = [self.check_frozen(article=articles[i]) for i in range(len(articles))]            assert all(item["omni_frozen"] == True for item in value_bd)            assert all(item["omni2_frozen"] == False for item in value_bd)            assert all(item["fulfilment_frozen"] == False for item in value_bd)