import allurefrom allure_commons.types import Severityfrom befree.api_model.catalog.db_queries.queries import QueriesCatalogclass TestStickers(QueriesCatalog):    @allure.title("Товар без стикера на странице товара")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Стикеры")    @allure.label("owner", "balakirevams")    @allure.label("service", "Public")    @allure.label("layers", "ui")    def test_without_stickers(self, shop):        with allure.step("Находим артикул товара, у которого нет ни одного стикера"):            conditions = [                """and v.sticker_hit is null and v.sticker_new is null and v.sticker_custom is null"""            ]            product = self.get_data_for_product_card(conditions=conditions)        with allure.step("Перейти на страницу товара без стикеров"):            slug = f"{product['article']}/{product['color_code_id']}?size={product['size_id']}"            shop.product_page.navigate(slug=slug)        with allure.step("Проверяем, что на странице товара не выводится блок со стикерами"):            shop.product_page.check_stikers_not_exist()    @allure.title("Товар со стикером New на странице товара")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Стикеры")    @allure.label("owner", "balakirevams")    @allure.label("service", "Public")    @allure.label("layers", "ui")    def test_with_sticker_new(self, shop):        with allure.step("Находим артикул товара, у которого есть только стикер new"):            conditions = [                """and v.sticker_new = 1 and v.sticker_hit is null and v.sticker_custom is null"""            ]            product = self.get_data_for_product_card(conditions=conditions)        with allure.step("Перейти на страницу товара со стикером new"):            slug = f"{product['article']}/{product['color_code_id']}?size={product['size_id']}"            shop.product_page.navigate(slug=slug)        with allure.step("Проверяем, что на странице товара выводится стикер new"):            shop.product_page.check_default_stickers(state="new")    @allure.title("Товар со стикером Hit на странице товара")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Стикеры")    @allure.label("owner", "balakirevams")    @allure.label("service", "Public")    @allure.label("layers", "ui")    def test_with_sticker_hit(self, shop):        with allure.step("Находим артикул товара, у которого есть только стикер hit"):            conditions = [                """and v.sticker_new is null and v.sticker_hit = 2 and v.sticker_custom is null"""            ]            product = self.get_data_for_product_card(conditions=conditions)        with allure.step("Перейти на страницу товара со стикером hit"):            slug = f"{product['article']}/{product['color_code_id']}?size={product['size_id']}"            shop.product_page.navigate(slug=slug)        with allure.step("Проверяем, что на странице товара выводится стикер hit"):            shop.product_page.check_default_stickers(state="hit")    @allure.title("Товар с кастомным стикером на странице товара")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Стикеры")    @allure.label("owner", "balakirevams")    @allure.label("service", "Public")    @allure.label("layers", "ui")    def test_with_sticker_custom(self, shop):        with allure.step("Находим артикул товара, у которого есть только кастомный стикер"):            conditions = [                """and v.sticker_new is null and v.sticker_hit is null and v.sticker_custom is not null                and ps.is_visible is true"""            ]            join_conditions = ["join product_stickers ps on ps.id  = v.sticker_custom"]            product = self.get_data_for_product_card(conditions=conditions,join_conditions=join_conditions)        with allure.step("Получаем из бд данные кастомного стикера"):            conditions = [f"article = '{product['article']}'"]            product_db = self.query_by_conditions(table = 'products', conditions = conditions)[0]            sticker_data = self.entity_by_id(table = 'product_stickers', id = product_db["sticker_custom"])        with allure.step("Перейти на страницу товара с кастомным стикером"):            slug = f"{product['article']}/{product['color_code_id']}?size={product['size_id']}"            shop.product_page.navigate(slug=slug)        with allure.step("Проверяем, что на странице товара выводится кастомный стикер"):            shop.product_page.check_custom_sticker(sticker_id=product_db["sticker_custom"],                                                   color_hex=sticker_data["front_color_hex"],                                                   background_color_hex=sticker_data["front_bg_color_hex"])    @allure.title("Товар со стикерами New и Hit на странице товара")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Стикеры")    @allure.label("owner", "balakirevams")    @allure.label("service", "Public")    @allure.label("layers", "ui")    def test_with_sticker_new_hit(self, shop):        with allure.step("Находим артикул товара, у которого есть стикеры new и hit"):            conditions = [                """and v.sticker_new = 1 and v.sticker_hit = 2 and v.sticker_custom is null"""            ]            product = self.get_data_for_product_card(conditions=conditions)        with allure.step("Перейти на страницу товара"):            slug = f"{product['article']}/{product['color_code_id']}?size={product['size_id']}"            shop.product_page.navigate(slug=slug)        with allure.step("Проверяем, что на странице товара выводятся стикеры new и hit"):            shop.product_page.check_default_stickers(state="new")            shop.product_page.check_default_stickers(state="hit")    @allure.title("Товар с кастомным стикером и стикером New на странице товара")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Стикеры")    @allure.label("owner", "balakirevams")    @allure.label("service", "Public")    @allure.label("layers", "ui")    def test_with_sticker_new_custom(self, shop):        with allure.step("Находим артикул товара, у которого есть стикеры new и кастомный"):            conditions = [                """and v.sticker_new = 1 and v.sticker_hit is null and v.sticker_custom is not null                and ps.is_visible is true"""            ]            join_conditions = ["join product_stickers ps on ps.id  = v.sticker_custom"]            product = self.get_data_for_product_card(conditions=conditions, join_conditions=join_conditions)        with allure.step("Получаем из бд данные кастомного стикера"):            conditions = [f"article = '{product['article']}'"]            product_db = self.query_by_conditions(table = 'products', conditions = conditions)[0]            sticker_data = self.entity_by_id(table = 'product_stickers', id = product_db["sticker_custom"])        with allure.step("Перейти на страницу товара"):            slug = f"{product['article']}/{product['color_code_id']}?size={product['size_id']}"            shop.product_page.navigate(slug=slug)        with allure.step("Проверяем, что на странице товара выводятся стикер new"):            shop.product_page.check_default_stickers(state="new")        with allure.step("Проверяем, что на странице товара выводится кастомный стикер"):            shop.product_page.check_custom_sticker(sticker_id=product_db["sticker_custom"],                                                   color_hex=sticker_data["front_color_hex"],                                                   background_color_hex=sticker_data["front_bg_color_hex"])    @allure.title("Товар с кастомным стикером и стикером Hit на странице товара")    @allure.severity(Severity.CRITICAL)    @allure.suite("Product")    @allure.label("feature", "Стикеры")    @allure.label("owner", "balakirevams")    @allure.label("service", "Public")    @allure.label("layers", "ui")    def test_with_sticker_hit_custom(self, shop):        with allure.step("Находим артикул товара, у которого есть стикеры hit и кастомный"):            conditions = [                """and v.sticker_new is null and v.sticker_hit = 2 and v.sticker_custom is not null                and ps.is_visible is true"""            ]            join_conditions = ["join product_stickers ps on ps.id  = v.sticker_custom"]            product = self.get_data_for_product_card(conditions=conditions, join_conditions=join_conditions)        with allure.step("Получаем из бд данные кастомного стикера"):            conditions = [f"article = '{product['article']}'"]            product_db = self.query_by_conditions(table='products', conditions=conditions)[0]            sticker_data = self.entity_by_id(table='product_stickers', id=product_db["sticker_custom"])        with allure.step("Перейти на страницу товара"):            slug = f"{product['article']}/{product['color_code_id']}?size={product['size_id']}"            shop.product_page.navigate(slug=slug)        with allure.step("Проверяем, что на странице товара выводятся стикер hit"):            shop.product_page.check_default_stickers(state="hit")        with allure.step("Проверяем, что на странице товара выводится кастомный стикер"):            shop.product_page.check_custom_sticker(sticker_id=product_db["sticker_custom"],                                                   color_hex=sticker_data["front_color_hex"],                                                   background_color_hex=sticker_data["front_bg_color_hex"])