import jsonfrom playwright.sync_api import expectclass Core:    def move_cursor(self, page):        """        Перемещает курсор мыши в координаты (0, 0) — верхний левый угол экрана.        Метод добавлен как костыль, для проверки состояния элементов после нажатия на них,        т к иначе оставался ховер и состояние элемента (цвет) не соответствовало существующему        """        page.mouse.move(0, 0)    def check_visibility(self, locator, visibility):        """        Проверяет видимость локатора        :param visibility: Статус, может быть 'visible' или 'not_visible'        :param locator: Локатор        :return:        """        visibility_checks = {            "visible": lambda loc: expect(loc).to_be_visible(),            "not_visible": lambda loc: expect(loc).not_to_be_visible()        }        return visibility_checks[visibility](locator)    def check_state_in_dict(self, locator, state, dict):        """        Проверяет состояние элемента на соответствие того, что передано существует в словаре.        :param state: Состояние        :param dict: Словарь состояний        :param locator: Локатор        """        # есть ли переданный стейт в словаре        if state not in dict:            raise ValueError(f"Unknown state: {state}")        for prop, (check_type, value) in dict[            state        ].items():  # Получаем данные объекта из словаря. В prop название проверки,check_type - тип проверки (to_have/not_to_have), а в value значение            if check_type == "to_have":  # Тут идут основные проверки, как и в текущих методах                expect(locator).to_have_css(prop, value)            elif check_type == "not_to_have":                expect(locator).not_to_have_css(prop, value)            else:                raise ValueError(f"Unknown check type: {check_type}")    def mock_api(self, route, body):        """        Регистрируем мок до клика, чтобы перехватить запрос        :param route: Route        :param body: Замоканное тело запроса        """        route.fulfill(                status=200,                content_type="application/json",                body=json.dumps(body)            )