import jsonimport refrom playwright.sync_api import expectimport osimport requestsfrom befree.ui_model.shop.product.mocks import Mocksfrom utils import helpersfrom typing import Literalfrom befree.ui_model.shop.product.locators import Locatorsfrom befree.ui_model.shop.states import Statesfrom befree.ui_model.shop import Headerfrom playwright.sync_api import Pagefrom befree.ui_model import corefrom befree.api_model.catalog.db_queries.queries import QueriesCatalogclass ProductPage:    def __init__(self, page: Page):        self.page = page        self._db_catalog = QueriesCatalog        self._locators = Locators(self.page)        self._header = Header(self.page)        self._states = States()        self._mocks = Mocks()    def navigate(self, slug, gender="zhenskaya"):        """Переход на страницу товара"""        self.page.goto(url=f"{gender}/product/{slug}")        helpers.remove_flocktory_overlay(self.page)    def check_size_table_exist(self):        """Проверяем, что на странице присутствует линк на таблицу размеров"""        expect(self._locators.size_table).to_be_visible()    def check_size_table_not_exist(self):        """Проверяем, что на странице НЕ присутствует линк на таблицу размеров"""        expect(self._locators.size_table).not_to_be_visible()    def check_size_table_not_empty(self):        """Проверяем, что в шторе Таблица размеров НЕ пустая и выводятся какие-либо атрибуты"""        locator1 = self._locators.attributes_product_dimensions.is_visible()        locator2 = self._locators.attributes_size_comparison.is_visible()        locator3 = self._locators.attributes_body_dimensions.is_visible()        locator4 = self._locators.height_info.is_visible()        assert locator1 or locator2 or locator3 or locator4, "Таблица размеров пустая, атрибуты не выводятся"    def check_size_table_empty(self):        """Проверяем, что в шторе Таблица размеров пустая и не выводятся атрибуты"""        expect(self._locators.attributes_product_dimensions).not_to_be_visible()        expect(self._locators.attributes_body_dimensions).not_to_be_visible()        expect(self._locators.attributes_size_comparison).not_to_be_visible()        expect(self._locators.height_info).not_to_be_visible()    def open_size_table(self):        """Открываем таблицу размеров"""        self._locators.size_table.click()    def check_height_info_exist(self):        """Проверяем, что на шторе Таблица размеров выводится дополнительная информация о росте"""        expect(self._locators.height_info).to_be_visible()        expect(self._locators.height_info_text).to_be_visible()    def check_height_info_not_exist(self):        """Проверяем, что на шторе Таблица размеров НЕ выводится дополнительная информация о росте"""        expect(self._locators.height_info).not_to_be_visible()        expect(self._locators.height_info_text).not_to_be_visible()    def click_button_product_out_of_stock(self):        """Нажимаем на кнопку 'Сообщить о поступлении' на странице товара"""        self._locators.button_product_out_of_stock.click()        core.move_cursor(self.page)    def click_button_product_to_delivery(self):        """Нажимаем на кнопку 'Оформить доставку' на странице товара"""        with self.page.expect_navigation():            self._locators.button_product_to_delivery.click()    def click_button_product_add_cart(self):        """Нажимаем на кнопку 'Добавить в корзину' на странице товара"""        self._locators.button_product_add_cart.click()        core.move_cursor(self.page)    def click_button_product_go_cart(self):        """Нажимаем на кнопку 'Перейти в корзину' на странице товара'"""        with self.page.expect_navigation():            self._locators.button_product_go_cart.click()    def click_button_size_table_add_cart(self):        """Нажимаем на кнопку 'Добавить в корзину' в шторе 'Таблица размеров'"""        self._locators.button_size_table_add_cart.click()        core.move_cursor(self.page)    def click_button_size_table_out_of_stock(self):        """Нажимаем на кнопку 'Сообщить о поступлении' в шторе 'Таблица размеров'"""        self._locators.button_size_table_out_of_stock.click()        core.move_cursor(self.page)    def click_button_size_table_to_delivery(self):        """Нажимаем на кнопку 'Оформить доставку' в шторе 'Таблица размеров'"""        with self.page.expect_navigation():            self._locators.button_size_table_to_delivery.click()    def click_button_size_table_go_cart(self):        """Нажимаем на кнопку 'Перейти в корзину' в шторе 'Таблица размеров'"""        with self.page.expect_navigation():            self._locators.button_size_table_go_cart.click()    def check_navigate_checkout(self):        """Проверяем, что произошел переход на чекаут"""        url = f"{os.getenv('SHOP_URL')}/checkout/delivery"        assert self.page.url == url    def check_navigate_cart(self):        """Проверяем, что произошел переход на страницу корзины"""        url = f"{os.getenv('SHOP_URL')}/cart"        assert self.page.url == url    def check_stikers_not_exist(self):        """Проверяем, что на странице НЕ присутствует блок со стикерами"""        expect(self._locators.product_stickers).not_to_be_visible()    def check_custom_sticker(self, sticker_id, color_hex, background_color_hex):        """Проверяем, что состояние кастомного стикера"""        locator = getattr(self._locators, "product_sticker")(sticker_id)        expect(locator).to_be_visible()        color_rgb = helpers.hex_to_rgb(hex_color=color_hex)        expect(locator).to_have_css("color", color_rgb)        background_color_rgb = helpers.hex_to_rgb(hex_color=background_color_hex)        expect(locator).to_have_css("background-color", background_color_rgb)    def click_on_param(        self, param: Literal["size", "height"], block: Literal["product", "size_table"], id: str    ) -> None:        """        Нажимает на размер/рост, соответствующий переданным параметрам.        :param param: Параметр, который может быть 'size' или 'height'.        :param block: Блок, который может быть 'product' или 'size_table'.        :param id: Идентификатор размера/роста        """        locator = getattr(self._locators, f"{block}_{param}")        locator(id).click()        core.move_cursor(self.page)    def check_all_params_not_selected(        self, param: Literal["size", "height"], block: Literal["product", "size_table"]    ) -> None:        """        Проверяем, что ни один рост/размер не выбран        :param param: Параметр, который может быть 'size' или 'height'.        :param block: Блок, который может быть 'product' или 'size_table'.        """        children = getattr(self._locators, f"{block}_children_{param}s")        count = children.count()        for i in range(count):            expect(children.nth(i)).to_have_css("background-color", "rgb(255, 255, 255)")    def check_state_size_and_height(        self,        param: Literal["size", "height"],        state: Literal[            "in_stock_and_selected",            "in_stock_and_not_selected",            "out_of_stock_and_selected",            "out_of_stock_and_not_selected",            "not_exist",        ],        block: Literal["product", "size_table"],        id: str,    ) -> None:        """        Проверяет состояние продукта на основе переданных параметров.        :param param: Параметр, который может быть 'size' или 'height'.        :param state: Состояние, которое может быть одним из следующих:                      'in_stock_and_selected', 'in_stock_and_not_selected',                      'out_of_stock_and_selected', 'out_of_stock_and_not_selected',                      'not_exist'.        :param block: Блок, который может быть 'product' или 'size_table'.        :param id: Идентификатор размера/роста        """        locator = getattr(self._locators, f"{block}_{param}")(id)        core.check_state_in_dict(state=state, dict=self._states.STATE_SIZES_AND_HEIGHTS_CSS, locator=locator)    def check_state_buttons(        self,        block: Literal["product", "size_table"],        name: Literal["out_of_stock", "select_size", "select_height", "add_cart", "to_delivery", "go_cart","available_stores"],        state: Literal["black_default", "white_default", "disabled", "link"],        visibility: Literal["visible", "not_visible"] = "visible",    ) -> None:        """        Проверяет состояние кнопки на основе переданных параметров.        :param block: Блок, который может быть 'product' или 'size_table'.        :param name: Имя кнопки, которое может быть 'out_of_stock', 'select_size','select_height', 'add_cart',        'to_delivery', 'go_cart','available_stores'.        :param state: Состояние, которое может быть одним из следующих:                      'black_default', 'white_default',                      'disabled', 'link'.        :param visibility: Видимость кнопки 'visible' или 'not_visible'.        """        if state == "link":            locator = getattr(self._locators, f"link_{block}_{name}")        else:            locator = getattr(self._locators, f"button_{block}_{name}")        core.check_visibility(locator=locator, visibility=visibility)        if visibility == "visible":            core.check_state_in_dict(locator=locator, state=state, dict=self._states.STATE_BUTTONS_CSS)    def mock_product_data(self, article, mock_name, city_name: str):        """        Мокирование запроса GET SERVER_CATALOG/public/v2/products/{article}        :param article: Артикул товара        :param city_name: Название города        """        domain = os.getenv("PUBLIC_HOST_URL").replace(".", r"\.")        url = re.compile(rf"{domain}/public/v2/products/{article}.*")        body = getattr(self._mocks, mock_name)        self.page.route(url, lambda route: core.mock_api(route, body))        self._header.change_city(city_name=city_name)    def check_default_stickers(        self,        state: Literal["new", "hit"],        visibility: Literal["visible", "not_visible"] = "visible",    ) -> None:        """        Проверяет состояние кнопки на основе переданных параметров.        :param state: Дефолтный стикер 'new' или 'hit'.        :param visibility: Видимость стикера 'visible' или 'not_visible'.        """        if state == "new":            locator = getattr(self._locators, "product_sticker")(1)        elif state == "hit":            locator = getattr(self._locators, "product_sticker")(2)        core.check_visibility(locator=locator, visibility=visibility)        if visibility == "visible":            core.check_state_in_dict(locator=locator, state=state, dict=self._states.DEFAULT_STICKERS_CSS)    def get_db_product_info(self, city_name):        """        Получаем данные о товаре с api        """        city_info = self._db_catalog.get_city_data(title=city_name)        return requests.get(f"{os.getenv('PUBLIC_API_URL')}/products/BF2531120019?cityData[fiasId]={city_info['fias_id']}&cityData[goldenRecord]={city_info['golden_record']}")    def city_location_accept(self):        """        Подтверждаем город        """        popup_button = self.page.locator('//button[@data-bui-id="Button" and text()="верно"]')        try:            expect(popup_button).to_be_visible(timeout=2000)            popup_button.click()        except:            pass    def accordions_closed(self):        """        Проверяет что все аккордеоны закрыты и прокликиваются        """        self.city_location_accept()        longway = self.page.get_by_test_id('drawer-longway')        accordion_items = longway.locator('[data-bui-id="AccordionItem"]')        count = accordion_items.count()        for x in range(count):            element = accordion_items.nth(x)            expect(element).to_be_visible()            close_style = element.locator('[style]')            expect(close_style).to_have_attribute('style', 'max-height:0')            element.click()            expect(close_style).not_to_have_attribute('style', 'max-height:0')    def check_copy_article_button(self):        button = self._locators.description.locator('button')        expect(button).to_be_visible()    def take_attributes_from_description(self):        attributes = self._locators.description.locator('[style] div[data-bui-id="Typography"]:visible')        return attributes