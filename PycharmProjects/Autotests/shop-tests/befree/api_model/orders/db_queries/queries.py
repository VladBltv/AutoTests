from datetime import datetimefrom befree.api_model import db_connectionclass QueriesOrders:    def list_employee_days(self):        query = f"""                select ed.id                from employee_days ed                 where ed.deleted_at is null                order by ed.date desc           """        return db_connection.orders.get_data(query)    def get_cart_data(self, uuid):        query = f"""                select *                from carts c                 where c.uuid  = '{uuid}'           """        return db_connection.orders.get_data(query)    def get_order_by_delivery_payment(self, payment, shipping):        # условие o.id > 2005817379 добавлено, чтобы не проверялись заказы импортированные из монолита        query = f"""                      select  o.cart_uuid ,o.id as order_id                      from orders o                      where o.status not in ('cart','payment_waiting','temp') and o.id > 2005817379                   """        payment_method = "".join([r"""and o."data" #> '{payment, method}'='""", r'"', f"""{payment}""", r'"', r"""'"""])        shipping_method = "".join(            [r"""and o."data" #> '{shipping, method}'='""", r'"', f"""{shipping}""", r'"', r"""'"""])        query = "".join([query, payment_method, shipping_method, "\n limit 1"])        request = db_connection.orders.get_data(query)        return request[0]["cart_uuid"], request[0]["order_id"]    def count_pricerules(self, conditions):        params = " ".join(conditions)        query = f"""                        select count(*)                        from price_rules pr                         where pr.deleted_at is null {params}                   """        return db_connection.orders.get_data(query)[0]["count"]    def get_pricerule(self, conditions=" "):        params = " ".join(conditions)        query = f"""                    select id                    from price_rules pr                     where pr.deleted_at is null {params}                    limit 1                    """        return db_connection.orders.get_data(query)[0]["id"]    def get_pricerules_by_conditions(self, conditions=" "):        params = " ".join(conditions)        query = f"""                    select pr.id                    from  price_rules pr                     join price_rule_conditions prc on prc.price_rule_id =pr.id                    where pr.deleted_at is null  {params}                   """        return db_connection.orders.get_data(query)    def get_active_promocode(self):        query = f"""                    select p.id, p.code                    from price_rules pr                     left join promocodes p on p.price_rule_id = pr.id                     where pr.deleted_at is null and (start_at < NOW() or start_at is null) and (NOW() < end_at  or end_at is null)                    limit 1                    """        return db_connection.orders.get_data(query)[0]    def update_checkout_at(self, cart_uuid, date_time):        query = f"""                            update carts                             set checkout_at  = '{date_time}'                            where uuid = '{cart_uuid}'                        """        db_connection.orders.update_data(query)    def get_pricerules_with_sort(self, column, sort, limit):        query = f"""                    select id                    from price_rules pr                     where pr.deleted_at is null                     order by {column} {sort}, id desc                    limit {limit}                   """        return db_connection.orders.get_data(query)    def delete_pricerules(self, pricerules: str):        date = datetime.today().strftime("%Y-%m-%d")        query = f"""                    update price_rules                     set deleted_at = '{date}'                    where id in ({pricerules})                """        db_connection.orders.update_data(query)