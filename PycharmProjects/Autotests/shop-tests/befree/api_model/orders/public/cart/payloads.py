import jsonfrom mimesis import Datetimeclass Payloads:    def create_cart(self, items, fias_id, golden_record, platform, **kwargs):        return json.dumps(            {                "cityData": {                    "fiasId": fias_id,                    "goldenRecord": golden_record,                },                "operation": "add",                "items": items,                "userEnvironment": {"platform": platform},            }        )    def get_cart(self, cart_uuid, fias_id, golden_record, platform, state: str = "cart", **kwargs):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "state": state,            "userEnvironment": {"platform": platform},        }        payload.update(kwargs)        return json.dumps(payload)    def update_item_qty(        self, cart_uuid, fias_id, golden_record, current_tab, items, platform, **kwargs    ):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "operation": "update",            "currentTab": current_tab,            "items": items,        }        payload.update(kwargs)        return json.dumps(payload)    def restore_item_qty(        self, cart_uuid, fias_id, golden_record, current_tab, items, platform, **kwargs    ):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "operation": "restore",            "currentTab": current_tab,            "items": items,        }        payload.update(kwargs)        return json.dumps(payload)    def create_fast_cart(self, items, fias_id, golden_record, platform, current_tab, **kwargs):        payload = {            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "operation": "add",            "currentTab": current_tab,            "items": items,            "isQuick": True,        }        payload.update(kwargs)        return json.dumps(payload)    def update_promocode(        self, cart_uuid, fias_id, golden_record, promocode, platform, state: str = "cart", **kwargs    ):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "state": state,            "promocode": promocode,        }        payload.update(kwargs)        return json.dumps(payload)    def add_items(self, cart_uuid, fias_id, golden_record, items, platform, **kwargs):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "operation": "add",            "items": items,        }        payload.update(kwargs)        return json.dumps(payload)    def update_currentTab(self, cart_uuid, fias_id, golden_record, current_tab, platform, **kwargs):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "currentTab": current_tab,        }        payload.update(kwargs)        return json.dumps(payload)    def update_state(self, cart_uuid, fias_id, golden_record, state, platform, **kwargs):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "state": state,        }        payload.update(kwargs)        return json.dumps(payload)    def update_shipping_reserveinstore(        self,        cart_uuid,        fias_id,        golden_record,        store_id,        store_external_id,        platform,        state: str = "checkout",        services=["fitting"],        **kwargs,    ):        date = Datetime()        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "currentTab": "omni",            "state": state,            "shipping": {                "method": "reserveinstore",                "storeId": store_id,                "storeExternalId": store_external_id,                "date": date.datetime().today().strftime("%Y-%m-%d"),                "services": services,            },        }        payload.update(kwargs)        return json.dumps(payload)    def update_shipping_pickupinstore(        self,        cart_uuid,        fias_id,        golden_record,        store_id,        store_external_id,        platform,        state: str = "checkout",        services=["fitting"],        **kwargs,    ):        date = Datetime()        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "currentTab": "delivery",            "state": state,            "shipping": {                "method": "pickupinstore",                "storeId": store_id,                "storeExternalId": store_external_id,                "date": date.datetime().today().strftime("%Y-%m-%d"),                "services": services,            },        }        payload.update(kwargs)        return json.dumps(payload)    def update_shipping_pickup(        self,        cart_uuid,        fias_id,        golden_record,        pickpoint_id,        platform,        state: str = "checkout",        services=["fitting"],        **kwargs,    ):        date = Datetime()        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "currentTab": "delivery",            "state": state,            "shipping": {                "method": "pickup",                "pickpointId": pickpoint_id,                "date": date.datetime().today().strftime("%Y-%m-%d"),                "services": services,            },        }        payload.update(kwargs)        return json.dumps(payload)    def update_shipping_delivery(        self,        cart_uuid,        fias_id,        golden_record,        interval_id,        address,        platform,        state: str = "checkout",        services=["fitting"],        **kwargs,    ):        date = Datetime()        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "currentTab": "delivery",            "state": state,            "shipping": {                "method": "delivery",                "address": address,                "intervalId": interval_id,                "date": date.datetime().today().strftime("%Y-%m-%d"),                "services": services,            },        }        payload.update(kwargs)        return json.dumps(payload)    def set_customer(        self,        cart_uuid,        fias_id,        golden_record,        customer,        platform,        state: str = "checkout",        **kwargs,    ):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "state": state,            "customer": {                "timeZone": -4,                "email": customer["email"],                "phone": "+7 (234) 345-45-57",                "firstName": customer["first_name"],                "lastName": customer["last_name"],            },            "mindBox": {"subscribe": False},        }        payload.update(kwargs)        return json.dumps(payload)    def update_payment(        self, cart_uuid, fias_id, golden_record, method, platform, state: str = "summary", **kwargs    ):        payload = {            "cartUuid": cart_uuid,            "cityData": {                "fiasId": fias_id,                "goldenRecord": golden_record,            },            "userEnvironment": {"platform": platform},            "state": state,            "payment": {"method": method},        }        payload.update(kwargs)        return json.dumps(payload)