from befree.api_model.config.headers import Headersfrom befree.api_model.orders.public.cart.endpoints import Endpointsfrom befree.api_model.orders.public.cart.payloads import Payloadsfrom befree.api_model import apifrom requests import Responseclass Cart:    def __init__(self):        self._endpoints = Endpoints()        self._payloads = Payloads()        self._headers = Headers()        self.fias_id = "c2deb16a-0330-4f05-821f-1d09c93331e6"    def create(        self,        items,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.create_cart(                items=items, fias_id=fias_id, golden_record=golden_record, platform=platform            ),            headers={**self._headers.common, **token},        )        return response    def get(        self,        cart_uuid,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.get_cart(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_qty(        self,        cart_uuid,        current_tab,        items,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_item_qty(                cart_uuid=cart_uuid,                current_tab=current_tab,                items=items,                fias_id=fias_id,                golden_record=golden_record,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def restore_qty(        self,        cart_uuid,        current_tab,        items,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.restore_item_qty(                cart_uuid=cart_uuid,                current_tab=current_tab,                items=items,                fias_id=fias_id,                golden_record=golden_record,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def create_fast_cart(        self,        items,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        current_tab="omni",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.create_fast_cart(                items=items,                fias_id=fias_id,                golden_record=golden_record,                platform=platform,                current_tab=current_tab,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_promocode(        self,        cart_uuid,        promocode,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_promocode(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                promocode=promocode,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def add_items(        self,        cart_uuid,        items,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.add_items(                cart_uuid=cart_uuid,                items=items,                fias_id=fias_id,                golden_record=golden_record,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_current_tab(        self,        cart_uuid,        current_tab,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_currentTab(                cart_uuid=cart_uuid,                current_tab=current_tab,                fias_id=fias_id,                golden_record=golden_record,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_state(        self,        cart_uuid,        state,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_state(                cart_uuid=cart_uuid,                state=state,                fias_id=fias_id,                golden_record=golden_record,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_reserveinstore(        self,        cart_uuid,        store_id,        store_external_id,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_shipping_reserveinstore(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                store_id=store_id,                store_external_id=store_external_id,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_pickupinstore(        self,        cart_uuid,        store_id,        store_external_id,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_shipping_pickupinstore(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                store_id=store_id,                store_external_id=store_external_id,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_pickup(        self,        cart_uuid,        pickpoint_id,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_shipping_pickup(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                pickpoint_id=pickpoint_id,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_delivery(        self,        cart_uuid,        interval_id,        address,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_shipping_delivery(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                interval_id=interval_id,                address=address,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def set_customer(        self,        cart_uuid,        customer,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.set_customer(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                customer=customer,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response    def update_payment(        self,        cart_uuid,        method,        fias_id="c2deb16a-0330-4f05-821f-1d09c93331e6",        golden_record="sank-823938",        platform="DESKTOP",        **kwargs,    ):        token = dict()        token["Authorization"] = f"Bearer {kwargs.pop('token') if 'token' in kwargs else ''}"        response: Response = api.orders_session.post(            url=self._endpoints.update_cart,            data=self._payloads.update_payment(                cart_uuid=cart_uuid,                fias_id=fias_id,                golden_record=golden_record,                method=method,                platform=platform,                **kwargs,            ),            headers={**self._headers.common, **token},        )        return response