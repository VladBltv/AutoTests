import jsonfrom random import randintfrom mimesis import Text, Genericfrom befree.api_model.orders.private.pricerules.shemas import payment_method_requestfrom utils import helpersclass Payloads:    def get_list(self, page, per_page, query, types_ids, status, date_start, date_end, sort, sort_order):        payload = json.dumps(            {                "page": page,                "perPage": per_page,                "sort": sort,                "sortOrder": sort_order,                "filter": {                    "query": query,                    "typeIds": types_ids,                    "status": status,                    "dateStart": date_start,                    "dateEnd": date_end,                }            }        )        return payload    def discounts(self, **kwargs):        data = dict()        data["discounts"] = {}        if "discounts" in kwargs:            if kwargs["discounts"] is not None:                discounts_parts = kwargs.pop("discounts")                if "type" in discounts_parts:                    data["discounts"]["type"] = discounts_parts["type"]                if "amount" in discounts_parts:                    data["discounts"]["amount"] = discounts_parts["amount"]                if "deliveryPercent" in discounts_parts:                    data["discounts"]["deliveryPercent"] = discounts_parts["deliveryPercent"]        else:            data["discounts"]["type"] = "sum"            data["discounts"]["amount"] = randint(1, 300)            data["discounts"]["deliveryPercent"] = 0        return data    def promocodes(self, type=1, **kwargs):        data = dict()        data["promocodes"] = {}        if "promocodes" in kwargs:            if kwargs["promocodes"] is not None:                promocodes_parts = kwargs.pop("promocodes")                data["promocodes"]["counterType"] = promocodes_parts["counterType"]                data["promocodes"]["counterAmount"] = promocodes_parts["counterAmount"]                data["promocodes"]["values"] = promocodes_parts["values"]        else:            if type == 1:                data["promocodes"]["counterType"] = "general"                data["promocodes"]["counterAmount"] = randint(1, 300)                data["promocodes"]["values"] = [Text("en").word() + str(Generic().random.randint(1, 100))]        if data["promocodes"] == {}:            data["promocodes"] = None        return data    def conditions(self, type=2, **kwargs):        data = dict()        data["conditions"] = []        if "conditions" in kwargs:            if kwargs["conditions"] is not None:                conditions = kwargs.pop("conditions")                for i in range(len(conditions)):                    payload = {                        "type": conditions[i]["type"],                        "operand": conditions[i]["operand"],                        "condition": conditions[i]["condition"]                    }                    data["conditions"].append(payload)        else:            payload = {                "type": "platform",                "operand": "in",                "condition": ["app", "web"]            }            data["conditions"].append(payload)            if type == 2:                payload = {                    "type": "paymentMethod",                    "operand": "in",                    "condition": ["podeli"]                }                data["conditions"].append(payload)        return data    def create(self, **kwargs):        data = {}        if "title" in kwargs:            if kwargs["title"] is not None:                data["title"] = kwargs.pop("title")        else:            data["title"] = Text("ru").title()[:100]        if "description" in kwargs:            if kwargs["description"] is not None:                data["description"] = kwargs.pop("description")        else:            data["description"] = Text("ru").title()[:100]        if "dateStart" in kwargs:            if kwargs["dateStart"] is not None:                data["dateStart"] = kwargs.pop("dateStart")        if "dateEnd" in kwargs:            if kwargs["dateEnd"] is not None:                data["dateEnd"] = kwargs.pop("dateEnd")        if "typeId" in kwargs:            if kwargs["typeId"] is not None:                data["typeId"] = kwargs["typeId"]        else:            data["typeId"] = 1        if "productsListType" in kwargs:            if kwargs["productsListType"] is not None:                data["productsListType"] = kwargs["productsListType"]        else:            data["productsListType"] = "all"        conditions = self.conditions(type=data["typeId"] if "typeId" in data else None, **kwargs)        promocodes = self.promocodes(type=data["typeId"] if "typeId" in data else None, **kwargs)        discounts = self.discounts(**kwargs)        data = {**data, **discounts, **conditions, **promocodes}        return json.dumps(data)    def update(self, current_data, **kwargs):        schema = payment_method_request        payload = helpers.get_payload_for_update(current_data=current_data, schema=schema, **kwargs)        conditions = self.conditions(type=payload["typeId"] if "typeId" in payload else None, **kwargs)        promocodes = self.promocodes(type=payload["typeId"] if "typeId" in payload else None, **kwargs)        payload = {**payload, **conditions, **promocodes}        return json.dumps(payload)